upstream php-upstream {
    server php-fpm:9000;
}

upstream storefront-upstream {
    server storefront:3000;
}

server {
    listen 8081;

    location ~ ^/(content(-test)?|build|public)/ {
        proxy_set_header Host '127.0.0.1:8000';
        proxy_pass http://127.0.0.1:8080$request_uri;
    }
}

server {
    listen 8080;
    root /var/www/html/web;
    server_tokens off;
    client_max_body_size 32M;

    set $request_host $http_host;
    if ($http_originalhost) {
        set $request_host $http_originalhost;
    }

    server_name shopsys;

    fastcgi_read_timeout 300;
    proxy_read_timeout 300;

    add_header Access-Control-Allow-Origin "*" always;
    add_header Access-Control-Allow-Credentials "false" always;
    add_header X-Frame-Options "SAMEORIGIN";
    add_header X-Content-Type-Options "nosniff";

    location ~ ^/resolve-friendly-url {
        fastcgi_pass php-upstream;
        include fastcgi_params;
        fastcgi_param SCRIPT_FILENAME $realpath_root/resolveFriendlyUrl.php;
    }

    location ~ ^\/(admin|public|content(-test)?|ckeditor|build|bundles|graphql|_profiler|_wdt|file|redirect|elfinder|efconnect|personal-overview-export|codeception-acceptance-test|_error) {

        location ~ \/\. {
            # hide dotfiles (send to @app)
            try_files @app @app;
        }

        location ~ ^\/index.php$ {
            # hide index.php (send to @app)
            try_files @app @app;
        }

        location ~ ^\/ {
            add_header "Access-Control-Allow-Origin" "*";
            # try to serve existing files directly, fallback to @app
            try_files $uri @app;

            # Enable compression of JavaScripts and CSS
            location ~ (\.js|\.css)$ {
                gzip on;
                gzip_types application/javascript text/css;

                # Cache versioned static content for 1 year
                location ~ ((-v[0-9]+\.js)|(_[0-9]+\.css))$ {
                    expires 1y;

                    # (try_files directive is not inherited from the parent location so we have to repeat it)
                    try_files $uri @app;
                }

                # (try_files directive is not inherited from the parent location so we have to repeat it)
                try_files $uri @app;
            }

            location ~ ^\/content(-test)?\/images\/(?<entity_name>\w+)(?<image_type>\/\w+)?\/(?<image_size>(default|original|galleryThumbnail|modal|list|thumbnail|thumbnailSmall|thumbnailExtraSmall|thumbnailMedium|header|footer|productList|productListSecondRow|cartPreview|productListMiddle|productListMiddleRetina|listAside|listGrid|searchThumbnail|listBig)\/)(?<add_image_id>\d+--)?(?<image_name>([\w\-]+_)?(?<image_id>\d+))\.(?<image_extension>jpg|jpeg|png|gif) {
                expires 1w;

                return 301 $scheme://$http_host/content$1/images/$entity_name$image_type/$image_name.$image_extension$is_args$args;
            }

            location ~ ^\/content(-test)?\/images\/(?<entity_name>\w+)(?<image_type>\/\w+)?\/(?<image_name>([\w\-]+_)?(?<image_id>\d+))\.(?<image_extension>jpg|jpeg|png|gif) {
                expires 1w;

                error_page 418 = @imageResizer;

                if ($is_args != '') {
                    return 418;
                }

                try_files /content$1/images/$entity_name$image_type/$image_id.$image_extension @app;
            }

            location ~ ^\/content(-test)?\/images\/ {
                # Newly uploaded images get new ID (different URL) so they could be cached forever.
                # But change of resolution in images.yaml does not induce a change of URL
                # so it is safer to cache generated images only for few days.
                expires 1w;

                error_page 418 = @imageResizer;

                if ($is_args != '') {
                    return 418;
                }

                # (try_files directive is not inherited from the parent location so we have to repeat it)
                try_files $uri @app;
            }
        }
    }

    location ~ / {
        try_files @storefront @storefront;
    }

    location @storefront {
        internal;
        proxy_hide_header Access-Control-Allow-Origin;
        proxy_set_header Host $http_host;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_http_version 1.1;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection "Upgrade";
        proxy_pass http://storefront-upstream;
    }

    location @app {
        add_header "Access-Control-Allow-Origin" "";

        fastcgi_pass php-upstream;
        include fastcgi_params;
        # use $realpath_root instead of $document_root
        # because of symlink switching when deploying
        fastcgi_param DOCUMENT_ROOT $realpath_root;
        fastcgi_param SCRIPT_FILENAME $realpath_root/index.php;
        fastcgi_param HTTPS $http_x_forwarded_proto;
        fastcgi_param HTTP_HOST $request_host;
    }

    location @imageResizer {
        fastcgi_pass php-upstream;
        include fastcgi_params;
        fastcgi_param SCRIPT_FILENAME $realpath_root/imageResizer.php;
    }
}
