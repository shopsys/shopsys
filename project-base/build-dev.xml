<?xml version="1.0" encoding="UTF-8"?>
<project name="ShopSys Framework (dev)" default="build-demo-ci">

    <target name="build-dev" depends="timezones-check,clean,composer-dev,npm,dirs-create,domains-urls-check,assets,db-migrations,create-domains-data,generate-friendly-urls,replace-domains-urls,grunt,error-pages-generate,tests-acceptance-build,checks-diff" description="Builds application for development preserving your DB and runs checks on changed files."/>
    <target name="build-dev-quick" depends="timezones-check,clean,composer-dev,npm,dirs-create,domains-urls-check,assets,db-migrations,create-domains-data,generate-friendly-urls,replace-domains-urls,grunt,tests-acceptance-build" description="Builds application for development preserving your DB while skipping nonessential steps."/>
    <target name="build-demo-dev" depends="timezones-check,wipe-excluding-logs,composer-dev,npm,dirs-create,domains-urls-check,assets,db-demo,grunt,error-pages-generate,tests-acceptance-build,checks-diff" description="Builds application for development with clean demo DB and runs checks on changed files."/>
    <target name="build-demo-dev-quick" depends="timezones-check,wipe-excluding-logs,composer-dev,npm,dirs-create,domains-urls-check,assets,db-demo,grunt,tests-acceptance-build" description="Builds application for development with clean demo DB while skipping nonessential steps."/>
    <target name="build-demo-ci" depends="timezones-check,wipe-excluding-logs,composer-dev,npm,dirs-create,domains-urls-check,assets,db-demo,grunt,img-demo,error-pages-generate,tests-acceptance-build,checks-ci" description="Builds application for development with clean demo DB and runs CI checks."/>
    <target name="build-demo-ci-diff" depends="timezones-check,wipe-excluding-logs,composer-dev,npm,dirs-create,domains-urls-check,assets,db-demo,grunt,img-demo,error-pages-generate,tests-acceptance-build,checks-ci-diff" description="Builds application for development with clean demo DB and runs CI checks on changed files."/>

    <target name="checks" depends="db-check-mapping,standards,tests" description="Checks ORM mapping, coding standards and runs unit, DB and smoke tests."/>
    <target name="checks-diff" depends="db-check-mapping,standards-diff,tests" description="Checks ORM mapping, coding standards on changed files and runs unit, DB and smoke tests."/>
    <target name="checks-ci" depends="db-check-mapping,standards,tests,tests-acceptance" description="Checks ORM mapping, coding standards and runs unit, DB, smoke and acceptance tests."/>
    <target name="checks-ci-diff" depends="db-check-mapping,standards-diff,tests,tests-acceptance" description="Checks ORM mapping, coding standards on changed files and runs unit, DB, smoke and acceptance tests."/>

    <target name="standards" depends="phplint,phpcs-fixer,phpcs,phpmd,phpstan,twig-lint,yaml-lint,eslint-check" description="Checks coding standards."/>
    <target name="standards-diff" depends="phplint-diff,phpcs-fixer-diff,phpcs-diff,phpmd-diff,phpstan,twig-lint-diff,yaml-lint,eslint-check-diff" description="Checks coding standards on changed files."/>

    <target name="test-db-demo" depends="test-db-wipe-public-schema,test-db-import-basic-structure,test-db-migrations,test-db-fixtures-demo-singledomain,test-create-domains-data,test-generate-friendly-urls,test-db-fixtures-demo-multidomain,test-load-plugin-demo-data,test-replace-domains-urls" description="Drops all data in test database and creates a new one with demo data."/>
    <target name="test-db-performance" depends="test-db-demo,test-db-fixtures-performance" description="Drops all data in test database and creates a new one with performance data."/>
    <target name="tests" depends="test-db-demo,tests-unit,tests-db,tests-smoke" description="Runs unit, database and smoke tests on a newly built test database."/>

    <target name="tests-performance-run" depends="clean,test-db-performance,tests-performance-warmup,tests-performance" description="Runs performance tests on a newly built test database with performance data."/>

    <target name="composer-check" description="Checks if Composer lock file is valid.">
        <exec
            executable="${path.composer.executable}"
            logoutput="true"
            passthru="true"
            checkreturn="true"
        >
            <arg value="validate" />
            <arg value="--no-check-all" />
        </exec>
    </target>

    <target name="composer-dev" depends="composer-check" description="Installs dependencies for development.">
        <exec
            executable="${path.composer.executable}"
            logoutput="true"
            passthru="true"
            checkreturn="true"
        >
            <arg value="install"/>
        </exec>
    </target>

    <target name="dump-translations" description="Extracts translatable messages from all source files.">
        <exec executable="${path.php.executable}" passthru="true" checkreturn="true">
            <arg value="${path.bin-console}" />
            <arg value="translation:extract" />
            <arg value="--bundle=ShopsysShopBundle" />
            <arg value="--dir=${path.framework}/src/Component/Controller" />
            <arg value="--dir=${path.framework}/src/Component/Form" />
            <arg value="--dir=${path.framework}/src/Component/Grid" />
            <arg value="--dir=${path.framework}/src/Controller" />
            <arg value="--dir=${path.framework}/src/Form" />
            <arg value="--dir=${path.framework}/src/Model" />
            <arg value="--dir=${path.framework}/src/Resources/config" />
            <arg value="--dir=${path.framework}/src/Resources/views" />
            <arg value="--dir=${path.framework}/src/Resources/scripts" />
            <arg value="--dir=${path.framework}/src/Twig" />
            <arg value="--dir=${path.src}/Shopsys/ShopBundle/Controller" />
            <arg value="--dir=${path.src}/Shopsys/ShopBundle/Form" />
            <arg value="--dir=${path.src}/Shopsys/ShopBundle/Resources/config" />
            <arg value="--dir=${path.src}/Shopsys/ShopBundle/Resources/views" />
            <arg value="--dir=${path.src}/Shopsys/ShopBundle/Resources/scripts" />
            <arg value="--exclude-dir=admin/plugins" />
            <arg value="--exclude-dir=frontend/plugins" />
            <arg value="--output-format=po" />

            <arg value="cs" />
            <arg value="en" />
        </exec>
    </target>

    <target name="diff-files" description="Finds changed files (against origin/master) and saves them into properties.">
        <exec
            command="git merge-base origin/master HEAD"
            outputProperty="git.merge.base"
        />

        <exec
            command="git diff --name-only --diff-filter=ACMR ${git.merge.base} ${path.src} ${path.tests}"
            outputProperty="git.files.changed"
        />

        <exec
            command="git ls-files --others --exclude-standard ${path.src} ${path.tests}"
            outputProperty="git.files.unstaged"
        />

        <property name="diff.files.all" value="${git.files.changed}${line.separator}${git.files.unstaged}">
            <filterchain>
                <!-- ignore Codeception generated class for running acceptance tests -->
                <linecontainsregexp>
                    <regexp pattern="^(?!tests/ShopBundle/Test/Codeception/_generated/AcceptanceTesterActions.php).+$" />
                </linecontainsregexp>
            </filterchain>
        </property>

        <property name="diff.files.js" value="${diff.files.all}">
            <filterchain>
                <linecontainsregexp>
                    <!-- linecontainsregexp splits lines using \n, so string can end with whitespace -->
                    <regexp pattern="\.js\s*$" />
                </linecontainsregexp>
            </filterchain>
        </property>

        <property name="diff.files.php" value="${diff.files.all}">
            <filterchain>
                <linecontainsregexp>
                    <!-- linecontainsregexp splits lines using \n, so string can end with whitespace -->
                    <regexp pattern="\.php\s*$" />
                </linecontainsregexp>
            </filterchain>
        </property>

        <property name="diff.files.twig" value="${diff.files.all}">
            <filterchain>
                <linecontainsregexp>
                    <!-- linecontainsregexp splits lines using \n, so string can end with whitespace -->
                    <regexp pattern="\.twig\s*$" />
                </linecontainsregexp>
            </filterchain>
        </property>

        <property name="diff.files.all.spaces" value="${diff.files.all}">
            <filterchain>
                <replaceregexp>
                    <regexp pattern="[\r\n]+" replace=" " />
                </replaceregexp>
            </filterchain>
        </property>

        <property name="diff.files.js.spaces" value="${diff.files.js}">
            <filterchain>
                <replaceregexp>
                    <regexp pattern="[\r\n]+" replace=" " />
                </replaceregexp>
            </filterchain>
        </property>

        <property name="diff.files.php.spaces" value="${diff.files.php}">
            <filterchain>
                <replaceregexp>
                    <regexp pattern="[\r\n]+" replace=" " />
                </replaceregexp>
            </filterchain>
        </property>

        <property name="diff.files.twig.spaces" value="${diff.files.twig}">
            <filterchain>
                <replaceregexp>
                    <regexp pattern="[\r\n]+" replace=" " />
                </replaceregexp>
            </filterchain>
        </property>

        <property name="diff.files.php.commas" value="${diff.files.php}">
            <filterchain>
                <replaceregexp>
                    <regexp pattern="[\r\n]+" replace="," />
                    <regexp pattern="^,|,$" replace="" />
                </replaceregexp>
            </filterchain>
        </property>
    </target>

    <target name="eslint-check" description="Find JS coding standard violations in all files using ESLint and print human readable output.">
        <exec executable="${path.eslint.executable}" passthru="true" checkreturn="true">
            <arg value="--color" />
            <arg path="${path.src}" />
            <arg value="--config" />
            <arg path="${path.root}/.eslintrc.json" />
            <arg value="--ignore-path" />
            <arg path="${path.root}/.eslintignore" />
        </exec>
    </target>

    <target name="eslint-check-diff" depends="diff-files" description="Find JS coding standard violations in changed files using ESLint and print human readable output.">
        <if>
            <not>
                <equals arg1="${diff.files.js.spaces}" arg2="" trim="true" />
            </not>
            <then>
                <exec executable="${path.eslint.executable}" passthru="true" checkreturn="true">
                    <arg value="--color" />
                    <arg line="${diff.files.js.spaces}" />
                    <arg value="--config" />
                    <arg path="${path.root}/.eslintrc.json" />
                    <arg value="--ignore-path" />
                    <arg path="${path.root}/.eslintignore" />
                </exec>
            </then>
        </if>
    </target>

    <target name="eslint-fix" description="Fix JS coding standard violations in all files using ESLint.">
        <exec executable="${path.eslint.executable}" passthru="true" checkreturn="true">
            <arg value="--color" />
            <arg value="--fix" />
            <arg path="${path.src}" />
            <arg value="--config" />
            <arg path="${path.root}/.eslintrc.json" />
            <arg value="--ignore-path" />
            <arg path="${path.root}/.eslintignore" />
        </exec>
    </target>

    <target name="eslint-fix-diff" depends="diff-files" description="Fix JS coding standard violations in changed files using ESLint.">
        <if>
            <not>
                <equals arg1="${diff.files.js.spaces}" arg2="" trim="true" />
            </not>
            <then>
                <exec executable="${path.eslint.executable}" passthru="true" checkreturn="true">
                    <arg value="--color" />
                    <arg value="--fix" />
                    <arg line="${diff.files.js.spaces}" />
                    <arg value="--config" />
                    <arg path="${path.root}/.eslintrc.json" />
                    <arg value="--ignore-path" />
                    <arg path="${path.root}/.eslintignore" />
                </exec>
            </then>
        </if>
    </target>

    <target name="phpcbf" description="Fixes coding standards violations in all files by PHP Code Beautifier.">
        <exec
            executable="${path.phpcbf.executable}"
            logoutput="true"
            passthru="true"
            checkreturn="true"
        >
            <arg value="--standard=${path.phpcs.ruleset}"/>
            <arg value="--extensions=php"/>
            <arg value="--encoding=utf-8"/>
            <arg value="--tab-width=4"/>
            <arg value="--ignore=${path.phpcs.ignored}"/>
            <arg value="--no-patch"/>
            <arg path="${path.src}"/>
            <arg path="${path.tests}"/>
        </exec>
    </target>

    <target name="phpcbf-diff" depends="diff-files" description="Fixes coding standards violations in changed files by PHP Code Beautifier.">
        <if>
            <not>
                <equals arg1="${diff.files.php.spaces}" arg2="" trim="true" />
            </not>
            <then>
                <exec
                    executable="${path.phpcbf.executable}"
                    logoutput="true"
                    passthru="true"
                    checkreturn="true"
                >
                    <arg value="--standard=${path.phpcs.ruleset}"/>
                    <arg value="--extensions=php"/>
                    <arg value="--encoding=utf-8"/>
                    <arg value="--tab-width=4"/>
                    <arg value="--ignore=${path.phpcs.ignored}"/>
                    <arg value="--no-patch"/>
                    <arg line="${diff.files.php.spaces}"/>
                </exec>
            </then>
        </if>
    </target>

    <target name="phpcs" description="Checks coding standards in all files by PHP Code Sniffer.">
        <exec
            executable="${path.phpcs.executable}"
            logoutput="true"
            passthru="true"
            checkreturn="true"
        >
            <arg value="--standard=${path.phpcs.ruleset}"/>
            <arg value="--extensions=php"/>
            <arg value="--encoding=utf-8"/>
            <arg value="--tab-width=4"/>
            <arg value="-sp"/>
            <arg value="--ignore=${path.phpcs.ignored}"/>
            <arg path="${path.src}"/>
            <arg path="${path.tests}"/>
        </exec>
    </target>

    <target name="phpcs-diff" depends="diff-files" description="Checks coding standards in changed files by PHP Code Sniffer.">
        <if>
            <not>
                <equals arg1="${diff.files.php.spaces}" arg2="" trim="true" />
            </not>
            <then>
                <exec
                    executable="${path.phpcs.executable}"
                    logoutput="true"
                    passthru="true"
                    checkreturn="true"
                >
                    <arg value="--standard=${path.phpcs.ruleset}"/>
                    <arg value="--extensions=php"/>
                    <arg value="--encoding=utf-8"/>
                    <arg value="--tab-width=4"/>
                    <arg value="-sp"/>
                    <arg value="--ignore=${path.phpcs.ignored}"/>
                    <arg line="${diff.files.php.spaces}"/>
                </exec>
            </then>
        </if>
    </target>

    <target name="phpcs-fixer" description="Checks coding standards in all files by PHP CS Fixer.">
        <exec
            executable="${path.phpcs-fixer.executable}"
            logoutput="true"
            passthru="true"
            checkreturn="true"
        >
            <arg value="fix" />
            <arg value="--config=${path.phpcs-fixer.configuration}" />
            <arg value="--dry-run" />
            <arg value="--verbose" />
            <arg value="--diff" />
            <arg path="${path.src}" />
            <arg path="${path.tests}" />
        </exec>
    </target>

    <target name="phpcs-fixer-fix" description="Fixes coding standards violations in all files by PHP CS Fixer.">
        <exec
            executable="${path.phpcs-fixer.executable}"
            logoutput="true"
            passthru="true"
            checkreturn="false"
        >
            <arg value="fix" />
            <arg value="--config=${path.phpcs-fixer.configuration}" />
            <arg value="--verbose" />
            <arg path="${path.src}" />
            <arg path="${path.tests}" />
        </exec>
    </target>

    <target name="phpcs-fixer-diff" depends="diff-files" description="Checks coding standards in changed files by PHP CS Fixer.">
        <if>
            <not>
                <equals arg1="${diff.files.all.spaces}" arg2="" trim="true" />
            </not>
            <then>
                <exec
                    executable="${path.phpcs-fixer.executable}"
                    logoutput="true"
                    passthru="true"
                    checkreturn="true"
                >
                    <arg value="fix" />
                    <arg value="--config=${path.phpcs-fixer.configuration}" />
                    <arg value="--dry-run" />
                    <arg value="--verbose" />
                    <arg value="--diff" />
                    <arg line="${diff.files.all.spaces}"/>
                </exec>
            </then>
        </if>
    </target>

    <target name="phpcs-fixer-fix-diff" depends="diff-files" description="Fixes coding standards violations in changed files by PHP CS Fixer.">
        <if>
            <not>
                <equals arg1="${diff.files.all.spaces}" arg2="" trim="true" />
            </not>
            <then>
                <exec
                    executable="${path.phpcs-fixer.executable}"
                    logoutput="true"
                    passthru="true"
                    checkreturn="true"
                >
                    <arg value="fix" />
                    <arg value="--config=${path.phpcs-fixer.configuration}" />
                    <arg value="--verbose" />
                    <arg value="--diff" />
                    <arg line="${diff.files.all.spaces}"/>
                </exec>
            </then>
        </if>
    </target>

    <target name="phplint" description="Checks syntax of PHP files.">
        <exec
            executable="${path.phplint.executable}"
            logoutput="true"
            passthru="true"
            checkreturn="true"
        >
            <arg path="${path.src}"/>
            <arg path="${path.tests}" />
        </exec>
    </target>

    <target name="phplint-diff" depends="diff-files" description="Checks syntax of changed PHP files.">
        <if>
            <not>
                <equals arg1="${diff.files.php.spaces}" arg2="" trim="true" />
            </not>
            <then>
                <exec
                    executable="${path.phplint.executable}"
                    logoutput="true"
                    passthru="true"
                    checkreturn="true"
                >
                    <arg line="${diff.files.php.spaces}" />
                </exec>
            </then>
        </if>
    </target>

    <target name="phpmd" description="Checks coding standards in all files by PHP Mess Detector.">
        <exec
            executable="${path.phpmd.executable}"
            logoutput="true"
            passthru="true"
            checkreturn="true"
        >
            <arg value="${path.src},${path.tests}"/>
            <arg value="text"/>
            <arg value="${path.phpmd.ruleset}"/>
            <arg value="--extensions=php"/>
            <arg value="--exclude"/>
            <arg value="${path.phpmd.ignored}"/>
        </exec>
    </target>

    <target name="phpmd-diff" depends="diff-files" description="Checks coding standards in changed files by PHP Mess Detector.">
        <if>
            <not>
                <equals arg1="${diff.files.php.commas}" arg2="" trim="true" />
            </not>
            <then>
                <exec
                    executable="${path.phpmd.executable}"
                    logoutput="true"
                    passthru="true"
                    checkreturn="true"
                >
                    <arg value="${diff.files.php.commas}"/>
                    <arg value="text"/>
                    <arg value="${path.phpmd.ruleset}"/>
                    <arg value="--extensions=php"/>
                    <arg value="--exclude"/>
                    <arg value="${path.phpmd.ignored}"/>
                </exec>
            </then>
        </if>
    </target>

    <target name="phpstan" description="Performs static analysis of PHP files using PHPStan.">
        <exec
            executable="${path.phpstan.executable}"
            logoutput="true"
            passthru="true"
            checkreturn="true"
        >
            <arg value="analyze"/>

            <arg value="-c"/>
            <arg path="${path.phpstan.config}"/>

            <arg path="${path.src}"/>
            <arg path="${path.tests}"/>

            <arg value="--level=0"/>
        </exec>
    </target>

    <target name="selenium-run" description="Runs the Selenium server for acceptance testing. ChromeDriver is required.">
        <exec
            executable="${path.chromedriver.executable}"
            logoutput="true"
            passthru="true"
            checkreturn="true"
        >
            <arg value="--port=4444" />
            <arg value="--url-base=wd/hub" />
        </exec>
    </target>

    <target name="server-run" description="Runs PHP built-in web server for a chosen domain.">
        <exec executable="${path.php.executable}" passthru="true" checkreturn="true">
            <arg value="${path.bin-console}" />
            <arg value="shopsys:server:run" />
        </exec>
    </target>

    <target name="standards-fix" description="Automatically fixes some coding standards violations in all files.">
        <phingcall target="phpcs-fixer-fix" />
        <trycatch>
            <try>
                <phingcall target="phpcs" />
            </try>
            <catch>
                <phingcall target="phpcbf" />
            </catch>
        </trycatch>
        <phingcall target="eslint-fix" />
    </target>

    <target name="standards-fix-diff" description="Automatically fixes some coding standards violations in changed files.">
        <phingcall target="phpcs-fixer-fix-diff" />
        <trycatch>
            <try>
                <phingcall target="phpcs-diff" />
            </try>
            <catch>
                <phingcall target="phpcbf-diff" />
            </catch>
        </trycatch>
        <phingcall target="eslint-fix-diff" />
    </target>

    <target name="tests-acceptance" depends="clean,test-db-dump" description="Runs acceptance tests. Running Selenium server is required.">
        <available file="${path.env.test}" type="file" property="path.env.test.existed" />
        <if>
            <not>
                <equals arg1="${path.env.test.existed}" arg2="true" />
            </not>
            <then>
                <touch file="${path.root}/TEST" />
            </then>
        </if>

        <trycatch>
            <try>
                <exec
                    executable="${path.codeception.executable}"
                    logoutput="true"
                    passthru="true"
                    checkreturn="true"
                >
                    <arg value="run" />
                    <arg value="--config=${path.codeception.configuration}" />
                </exec>
            </try>
            <finally>
                <if>
                    <not>
                        <equals arg1="${path.env.test.existed}" arg2="true" />
                    </not>
                    <then>
                        <delete file="${path.root}/TEST" />
                    </then>
                </if>
            </finally>
        </trycatch>
    </target>

    <target name="tests-acceptance-build" description="Generates AcceptanceTesterActions.php (execute after change of Codeception modules, eg. StrictWebDriver).">
        <exec
            executable="${path.codeception.executable}"
            logoutput="true"
            passthru="true"
            checkreturn="true"
        >
            <arg value="build" />
            <arg value="--config=${path.codeception.configuration}" />
        </exec>
    </target>

    <target name="tests-smoke" depends="clean" description="Runs smoke tests.">
        <if>
            <istrue value="${is-multidomain}" />
            <then>
                <exec
                    executable="${path.phpunit.executable}"
                    logoutput="true"
                    passthru="true"
                    checkreturn="true"
                >
                    <arg value="--colors=always"/>
                    <arg value="--testsuite"/>
                    <arg value="Smoke"/>
                    <arg value="--exclude-group"/>
                    <arg value="singledomain"/>
                    <arg value="--configuration"/>
                    <arg value="${path.root}/phpunit.xml"/>
                </exec>
            </then>

            <else>
                <exec
                    executable="${path.phpunit.executable}"
                    logoutput="true"
                    passthru="true"
                    checkreturn="true"
                >
                    <arg value="--colors=always"/>
                    <arg value="--testsuite"/>
                    <arg value="Smoke"/>
                    <arg value="--exclude-group"/>
                    <arg value="multidomain"/>
                    <arg value="--configuration"/>
                    <arg value="${path.root}/phpunit.xml"/>
                </exec>
            </else>
        </if>
    </target>

    <target name="tests-db" depends="clean" description="Runs database/integration tests.">
        <if>
            <istrue value="${is-multidomain}" />
            <then>
                <exec
                    executable="${path.phpunit.executable}"
                    logoutput="true"
                    passthru="true"
                    checkreturn="true"
                >
                    <arg value="--colors=always"/>
                    <arg value="--testsuite"/>
                    <arg value="Database"/>
                    <arg value="--exclude-group"/>
                    <arg value="multidomain"/>
                    <arg value="--configuration"/>
                    <arg value="${path.root}/phpunit.xml"/>
                </exec>
            </then>
            <else>
                <exec
                    executable="${path.phpunit.executable}"
                    logoutput="true"
                    passthru="true"
                    checkreturn="true"
                >
                    <arg value="--colors=always"/>
                    <arg value="--testsuite"/>
                    <arg value="Database"/>
                    <arg value="--exclude-group"/>
                    <arg value="singledomain"/>
                    <arg value="--configuration"/>
                    <arg value="${path.root}/phpunit.xml"/>
                </exec>
            </else>
        </if>
    </target>

    <target name="tests-performance" depends="clean" description="Runs performance tests.">
        <exec
            executable="${path.phpunit.executable}"
            logoutput="true"
            passthru="true"
            checkreturn="true"
        >
            <arg value="--colors=always"/>
            <arg value="--testsuite"/>
            <arg value="Performance"/>
            <arg value="--exclude-group"/>
            <arg value="warmup"/>
            <arg value="--configuration"/>
            <arg value="${path.root}/phpunit.xml"/>
        </exec>
    </target>

    <target name="tests-performance-warmup" description="Warms up cache for performance tests.">
        <exec
            executable="${path.phpunit.executable}"
            logoutput="true"
            passthru="true"
            checkreturn="true"
        >
            <arg value="--colors=always"/>
            <arg value="--testsuite"/>
            <arg value="Performance"/>
            <arg value="--group"/>
            <arg value="warmup"/>
            <arg value="--configuration"/>
            <arg value="${path.root}/phpunit.xml"/>
        </exec>
    </target>

    <target name="tests-unit" depends="clean" description="Runs unit tests.">
        <if>
            <istrue value="${is-multidomain}" />
            <then>
                <exec
                    executable="${path.phpunit.executable}"
                    logoutput="true"
                    passthru="true"
                    checkreturn="true"
                >
                    <arg value="--colors=always"/>
                    <arg value="--testsuite"/>
                    <arg value="Unit"/>
                    <arg value="--exclude-group"/>
                    <arg value="singledomain"/>
                    <arg value="--configuration"/>
                    <arg value="${path.root}/phpunit.xml"/>
                </exec>
            </then>
            <else>
                <exec
                    executable="${path.phpunit.executable}"
                    logoutput="true"
                    passthru="true"
                    checkreturn="true"
                >
                    <arg value="--colors=always"/>
                    <arg value="--testsuite"/>
                    <arg value="Unit"/>
                    <arg value="--exclude-group"/>
                    <arg value="multidomain"/>
                </exec>
            </else>
        </if>
    </target>

    <target name="test-create-domains-data" description="Creates domains data in tests DB for newly configured domains.">
        <exec executable="${path.php.executable}" passthru="true" checkreturn="true">
            <arg value="${path.bin-console}" />
            <arg value="shopsys:domains-data:create" />
            <arg value="--env=test" />
        </exec>
    </target>

    <target name="test-db-check-schema" depends="db-check-mapping" description="Checks if test database schema is satisfying ORM and returns a list of suggestions to fix it.">
        <exec executable="${path.php.executable}" passthru="true" checkreturn="true">
            <arg value="${path.bin-console}" />
            <arg value="--env=test" />
            <arg value="shopsys:migrations:check-schema" />
        </exec>
    </target>

    <target name="test-db-create" description="Creates test database for application with required configuration.">
        <exec executable="${path.php.executable}" passthru="true" checkreturn="true">
            <arg value="${path.bin-console}" />
            <arg value="shopsys:database:create" />
            <arg value="--env=test" />
        </exec>
    </target>

    <target name="test-db-dump" description="Dumps current test database into a file to be used in acceptance tests.">
        <exec executable="${path.php.executable}" passthru="true" checkreturn="true">
            <arg value="${path.bin-console}" />
            <arg value="--env=test" />
            <arg value="shopsys:database:dump" />
            <arg value="--pgdump-bin=${path.pg_dump.executable}" />
            <arg value="${path.test.database.dump}" />
        </exec>
    </target>

    <target name="test-db-fixtures-base-settings" description="Loads base data fixtures into test DB.">
        <exec executable="${path.php.executable}" passthru="true" checkreturn="true">
            <arg value="${path.bin-console}" />
            <arg value="--env=test" />
            <arg value="doctrine:fixtures:load" />
            <arg value="--fixtures=${path.framework}/src/DataFixtures/Base" />
            <arg value="--append" />
            <arg value="--no-interaction" />
        </exec>
    </target>

    <target name="test-db-fixtures-demo-multidomain" description="Loads multidomain demo data fixtures excluding first domain into test DB.">
        <if>
            <istrue value="${is-multidomain}" />
            <then>
                <exec executable="${path.php.executable}" passthru="true" checkreturn="true">
                    <arg value="${path.bin-console}" />
                    <arg value="--env=test" />
                    <arg value="doctrine:fixtures:load" />
                    <arg value="--fixtures=${path.framework}/src/DataFixtures/DemoMultidomain" />
                    <arg value="--append" />
                    <arg value="--no-interaction" />
                </exec>
                <exec executable="${path.php.executable}" passthru="true" checkreturn="true">
                    <arg value="${path.bin-console}" />
                    <arg value="shopsys:recalculations" />
                    <arg value="--env=test" />
                </exec>
            </then>
            <else>
                <echo message="Multidomain demo data creation skipped." />
            </else>
        </if>
    </target>

    <target name="test-db-fixtures-demo-singledomain" description="Loads base and demo data fixtures for the first domain into test DB.">
        <exec executable="${path.php.executable}" passthru="true" checkreturn="true">
            <arg value="${path.bin-console}" />
            <arg value="--env=test" />
            <arg value="doctrine:fixtures:load" />
            <arg value="--fixtures=${path.framework}/src/DataFixtures/Base" />
            <arg value="--fixtures=${path.framework}/src/DataFixtures/Demo" />
            <arg value="--append" />
            <arg value="--no-interaction" />
        </exec>
        <exec executable="${path.php.executable}" passthru="true" checkreturn="true">
            <arg value="${path.bin-console}" />
            <arg value="shopsys:recalculations" />
            <arg value="--env=test" />
        </exec>
    </target>

    <target name="test-db-fixtures-performance" description="Loads performance data fixtures into test DB.">
        <exec executable="${path.php.executable}" passthru="true" checkreturn="true">
            <arg value="${path.bin-console}" />
            <arg value="--env=test" />
            <arg value="shopsys:performance-data" />
        </exec>
        <exec executable="${path.php.executable}" passthru="true" checkreturn="true">
            <arg value="${path.bin-console}" />
            <arg value="--env=test" />
            <arg value="shopsys:recalculations" />
        </exec>
    </target>

    <target name="test-db-import-basic-structure" description="Imports basic database structure (without migrations) into test database.">
        <exec executable="${path.php.executable}" passthru="true" checkreturn="true">
            <arg value="${path.bin-console}" />
            <arg value="--env=test" />
            <arg value="shopsys:schema:import-default" />
        </exec>
    </target>

    <target name="test-db-migrations" description="Executes test database migrations and checks schema.">
        <exec executable="${path.php.executable}" passthru="true" checkreturn="true">
            <arg value="${path.bin-console}" />
            <arg value="--env=test" />
            <arg value="shopsys:migrations:migrate" />
        </exec>
    </target>

    <target name="test-db-wipe-public-schema" description="Drops and creates public database schema in test database.">
        <exec executable="${path.php.executable}" passthru="true" checkreturn="true">
            <arg value="${path.bin-console}" />
            <arg value="--env=test" />
            <arg value="shopsys:schema:drop" />
        </exec>
        <exec executable="${path.php.executable}" passthru="true" checkreturn="true">
            <arg value="${path.bin-console}" />
            <arg value="--env=test" />
            <arg value="shopsys:schema:create" />
        </exec>
    </target>

    <target name="test-generate-friendly-urls" description="Generates friendly urls for supported entities when missing in test DB.">
        <exec executable="${path.php.executable}" passthru="true" checkreturn="true">
            <arg value="${path.bin-console}" />
            <arg value="--env=test" />
            <arg value="shopsys:generate:friendly-url" />
        </exec>
    </target>

    <target name="test-load-plugin-demo-data" description="Loads data fixtures of all registered plugins into test DB.">
        <exec executable="${path.php.executable}" passthru="true" checkreturn="true">
            <arg value="${path.bin-console}" />
            <arg value="--env=test" />
            <arg value="shopsys:plugin-data-fixtures:load" />
        </exec>
    </target>

    <target name="test-replace-domains-urls" description="Replaces domains urls in test database by urls in configuration.">
        <exec executable="${path.php.executable}" passthru="true" checkreturn="true">
            <arg value="${path.bin-console}" />
            <arg value="--env=test" />
            <arg value="shopsys:domains-urls:replace" />
        </exec>
    </target>

    <target name="twig-lint" description="Checks syntax of Twig templates.">
        <exec executable="${path.php.executable}" passthru="true" checkreturn="true">
            <arg value="${path.bin-console}" />
            <arg value="lint:twig" />
            <arg value="@ShopsysShopBundle" />
        </exec>
    </target>

    <target name="twig-lint-diff" depends="diff-files" description="Checks syntax of changed Twig templates.">
        <if>
            <not>
                <equals arg1="${diff.files.twig.spaces}" arg2="" trim="true" />
            </not>
            <then>
                <exec executable="${path.php.executable}" passthru="true" checkreturn="true">
                    <arg value="${path.bin-console}" />
                    <arg value="lint:twig" />
                    <arg line="${diff.files.twig.spaces}"/>
                </exec>
            </then>
        </if>
    </target>

    <target name="yaml-lint" description="Checks syntax of Yaml files.">
        <exec executable="${path.php.executable}" passthru="true" checkreturn="true">
            <arg value="${path.bin-console}" />
            <arg value="lint:yaml" />
            <arg value="@ShopsysShopBundle" />
        </exec>
        <exec executable="${path.php.executable}" passthru="true" checkreturn="true">
            <arg value="${path.bin-console}" />
            <arg value="lint:yaml" />
            <arg value="${path.app}/config" />
        </exec>
    </target>

    <target name="timezones-check" description="Checks uniformity of PHP and Postgres timezones.">
        <exec executable="${path.php.executable}" passthru="true" checkreturn="true">
            <arg value="${path.bin-console}" />
            <arg value="shopsys:check-timezones" />
        </exec>
    </target>

</project>
