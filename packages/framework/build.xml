<?xml version="1.0" encoding="UTF-8"?>
<project name="shopsys_framework" default="list">

    <property name="check-and-fix-annotations" value="false"/>
    <property name="path.app" value="${path.root}/app"/>
    <property name="path.bin" value="${path.vendor}/bin"/>
    <property name="path.bin-console" value="${path.root}/bin/console"/>
    <property name="path.build" value="${path.root}/build"/>
    <property name="path.build.properties.local" value="${path.build}/build.local.properties"/>
    <property name="path.build.stats" value="${path.build}/stats"/>
    <property name="path.chromedriver.executable" value="chromedriver"/>
    <property name="path.codeception.configuration" value="${path.build}/codeception.yml"/>
    <property name="path.codeception.executable" value="${path.bin}/codecept"/>
    <property name="path.composer.executable" value="composer"/>
    <property name="path.config" value="${path.root}/config"/>
    <property name="path.env.test" value="${path.root}/TEST"/>
    <property name="path.eslint.executable" value="${path.node_modules.bin}/eslint"/>
    <property name="path.framework" value="${project.basedir}"/>
    <property name="path.framework.assets" value="${path.framework}/assets"/>
    <property name="path.git.executable" value="git"/>
    <property name="path.node_modules" value="${path.root}/node_modules"/>
    <property name="path.node_modules.bin" value="${path.node_modules}/.bin"/>
    <property name="path.npm.executable" value="npm"/>
    <property name="path.pg_dump.executable" value="pg_dump"/>
    <property name="path.php.executable" value="php"/>
    <property name="path.ecs.executable" value="${path.bin}/ecs"/>
    <property name="path.phplint.executable" value="${path.bin}/parallel-lint"/>
    <property name="path.phpstan.config" value="${path.root}/phpstan.neon"/>
    <property name="path.phpstan.executable" value="${path.bin}/phpstan"/>
    <property name="path.phpunit.executable" value="${path.bin}/phpunit"/>
    <property name="path.root" value="."/>
    <property name="path.src" value="${path.root}/src"/>
    <property name="path.assets" value="${path.root}/assets"/>
    <property name="path.templates" value="${path.root}/templates"/>
    <property name="path.stylelint.executable" value="${path.node_modules.bin}/stylelint"/>
    <property name="path.test.database.dump" value="${path.var}/cache/test-db-dump.sql"/>
    <property name="path.tests" value="${path.root}/tests"/>
    <property name="path.var" value="${path.root}/var"/>
    <property name="path.vendor" value="${path.root}/vendor"/>
    <property name="path.web" value="${path.root}/web"/>
    <property name="path.web.styles.admin" value="${path.web}/assets/admin/styles"/>
    <property name="path.web.styles.front" value="${path.web}/assets/frontend/styles"/>
    <property name="path.web.styles.styleguide" value="${path.web}/assets/styleguide/styles"/>
    <property name="path.yaml-standards.executable" value="${path.bin}/yaml-standards"/>
    <property name="phpstan.level" value="5"/>
    <property name="phpstan.memory-limit" value="2048M"/>
    <property name="translations.dump.flags" value="--keep"/>
    <property name="yaml-standards.indent-count" value="4"/>
    <property name="yaml-standards.args" value=""/>

    <if>
        <os family="windows"/>
        <then>
            <property name="dev.null" value="NUL"/>
        </then>
        <else>
            <property name="dev.null" value="/dev/null"/>
        </else>
    </if>

    <target name="annotations-check" description="Checks whether annotations of extended classes in the project match the actual types according to ClassExtensionRegistry. Reported problems can be fixed using 'annotations-fix' phing target">
        <if>
            <istrue value="${check-and-fix-annotations}"/>
            <then>
                <exec executable="${path.php.executable}" passthru="true" checkreturn="true">
                    <arg value="${path.bin-console}"/>
                    <arg value="shopsys:extended-classes:annotations"/>
                    <arg value="--dry-run"/>
                </exec>
            </then>
            <else>
                <echo>
                    Annotations checks are turned off by configuration, see "check-and-fix-annotations" build property.
                    You are still able to run "shopsys:extended-classes:annotations" Symfony command directly.
                </echo>
            </else>
        </if>
    </target>

    <target name="annotations-fix" description="Fixes and adds annotations in project classes to improve static analysis and DX with extended classes">
        <if>
            <istrue value="${check-and-fix-annotations}"/>
            <then>
                <exec executable="${path.php.executable}" passthru="true" checkreturn="true">
                    <arg value="${path.bin-console}"/>
                    <arg value="shopsys:extended-classes:annotations"/>
                </exec>
            </then>
            <else>
                <echo>
                    Annotations fixes are turned off by configuration, see "check-and-fix-annotations" build property.
                    You are still able to run "shopsys:extended-classes:annotations" Symfony command directly.
                </echo>
            </else>
        </if>
    </target>

    <target name="assets" description="Installs web assets from external bundles into a public web directory.">
        <delete failonerror="false" includeemptydirs="true">
            <fileset dir="${path.root}/web/bundles/">
                <exclude name="/"/>
            </fileset>
        </delete>
        <exec executable="${path.php.executable}" passthru="true" checkreturn="true">
            <arg value="${path.bin-console}"/>
            <arg value="assets:install"/>
            <arg value="${path.root}/web/"/>
        </exec>
        <exec executable="${path.php.executable}" passthru="true" checkreturn="true">
            <arg value="${path.bin-console}"/>
            <arg value="elfinder:install"/>
        </exec>
        <exec executable="${path.php.executable}" passthru="true" checkreturn="true">
            <arg value="${path.bin-console}"/>
            <arg value="shopsys:elfinder:post-install"/>
        </exec>
    </target>

    <target name="build" depends="build-deploy-part-1-db-independent,build-deploy-part-2-db-dependent" description="Builds application for production preserving your DB."/>

    <target name="build-demo" depends="production-protection,wipe,build-version-generate,composer-prod,redis-check,dirs-create,assets,npm,db-demo,elasticsearch-index-recreate,elasticsearch-export,error-pages-generate,warmup,clean-redis-old" description="Builds application for production with clean demo DB."/>

    <target name="build-demo-ci" depends="production-protection,build-version-generate,wipe-excluding-logs,composer-dev,timezones-check,dirs-create,test-dirs-create,assets,npm,db-demo,elasticsearch-index-recreate,elasticsearch-export,error-pages-generate,tests-acceptance-build,clean-redis-old,checks-ci" description="Builds application for development with clean demo DB and runs CI checks."/>

    <target name="build-demo-dev" depends="production-protection,build-version-generate,wipe-excluding-logs,composer-dev,timezones-check,dirs-create,test-dirs-create,assets,npm,db-demo,elasticsearch-index-recreate,elasticsearch-export,error-pages-generate,tests-acceptance-build,clean-redis-old,checks" description="Builds application for development with clean demo DB and runs checks on changed files."/>

    <target name="build-demo-dev-quick" depends="production-protection,build-version-generate,wipe-excluding-logs,composer-dev,dirs-create,test-dirs-create,assets,npm,db-demo,elasticsearch-index-recreate,elasticsearch-export,clean-redis-old" description="Builds application for development with clean demo DB while skipping nonessential steps."/>

    <target name="build-deploy-part-1-db-independent" depends="build-version-generate,clean,composer-prod,dirs-create,assets,npm" description="First part of application build for production preserving your DB (can be run without maintenance page)."/>

    <target name="build-deploy-part-2-db-dependent" depends="elasticsearch-index-migrate,redis-check,db-migrations,domains-data-create,friendly-urls-generate,domains-urls-replace,error-pages-generate,warmup,clean-redis-old" description="Second part of application build for production preserving your DB (must be run with maintenance page when containing DB migrations)."/>

    <target name="build-dev" depends="build-version-generate,clean,composer-dev,timezones-check,dirs-create,test-dirs-create,assets,npm,db-migrations,domains-data-create,friendly-urls-generate,domains-urls-replace,elasticsearch-index-recreate,elasticsearch-export,error-pages-generate,tests-acceptance-build,clean-redis-old,checks" description="Builds application for development preserving your DB and runs checks on changed files."/>

    <target name="build-dev-quick" depends="build-version-generate,clean,composer-dev,dirs-create,test-dirs-create,assets,npm,db-migrations,domains-data-create,friendly-urls-generate,domains-urls-replace,elasticsearch-index-migrate,clean-redis-old" description="Builds application for development preserving your DB while skipping nonessential steps."/>

    <target name="build-new" depends="production-protection,wipe,build-version-generate,composer-prod,redis-check,dirs-create,assets,npm,db-rebuild,elasticsearch-index-recreate,error-pages-generate,warmup,clean-redis-old" description="Builds application for production with clean DB (with base data only)."/>

    <target name="build-version-generate" description="Generates parameters_version.yaml config file with a new build version number.">
        <exec executable="${path.php.executable}" checkreturn="true" outputProperty="version">
            <arg value="-r"/>
            <arg value="echo date('YmdHis');"/>
        </exec>
        <copy file="${path.config}/parameters_version.yaml.dist" tofile="${path.config}/parameters_version.yaml" overwrite="true">
            <filterchain>
                <replacetokens begintoken="%%" endtoken="%%">
                    <token key="version" value="${version}"/>
                </replacetokens>
            </filterchain>
        </copy>
    </target>

    <target name="checks" depends="checks-internal,standards,tests" description="Runs internal checks, coding standards and runs unit, DB and smoke tests."/>

    <target name="checks-ci" depends="checks-internal,test-db-demo,test-elasticsearch-index-recreate,test-elasticsearch-export,tests-functional,tests-smoke,tests-acceptance" description="Runs internal checks and runs DB, smoke and acceptance tests."/>

    <target name="checks-diff" depends="checks-internal,standards-diff,tests" description="Runs internal checks, coding standards on changed files and runs unit, DB and smoke tests."/>

    <target name="checks-internal" depends="db-check-schema,timezones-check,redis-check,composer-check" description="Runs all internal checks, eg. availability of services or validity of configuration." hidden="true"/>

    <target name="clean" depends="clean-cache-dir" description="Cleans up directories with cache and scripts which are generated on demand."/>

    <target name="clean-cache" depends="clean-cache-dir,clean-redis" description="Cleans up all application cache."/>

    <target name="clean-cache-dir" description="Cleans up directory with Symfony cache." hidden="true">
        <delete failonerror="false" includeemptydirs="true">
            <fileset dir="${path.var}/cache/">
                <exclude name="/"/>
            </fileset>
        </delete>
    </target>

    <target name="clean-redis" depends="redis-check" description="Cleans up redis cache">
        <exec executable="${path.php.executable}" passthru="true" checkreturn="true" output="${dev.null}">
            <arg value="${path.bin-console}"/>
            <arg value="shopsys:redis:clean-cache"/>
        </exec>
    </target>

    <target name="clean-redis-old" depends="redis-check" description="Cleans up redis cache for previous build versions">
        <exec executable="${path.php.executable}" passthru="true" checkreturn="true" output="${dev.null}">
            <arg value="${path.bin-console}"/>
            <arg value="shopsys:redis:clean-cache-old"/>
        </exec>
    </target>

    <target name="clean-styles" description="Cleans up directories with CSS generated by Grunt." hidden="true">
        <delete failonerror="false" includeemptydirs="true">
            <fileset dir="${path.web.styles.admin}/">
                <exclude name="/"/>
            </fileset>
            <fileset dir="${path.web.styles.front}/">
                <exclude name="/"/>
            </fileset>
            <fileset dir="${path.web.styles.styleguide}/">
                <exclude name="/"/>
            </fileset>
        </delete>
    </target>

    <target name="composer-check" description="Checks if Composer lock file is valid." hidden="true">
        <exec executable="${path.composer.executable}" logoutput="true" passthru="true" checkreturn="true">
            <arg value="validate"/>
            <arg value="--no-check-all"/>
        </exec>
    </target>

    <target name="composer-dev" depends="production-protection,composer-check" description="Installs dependencies for development.">
        <exec executable="${path.composer.executable}" logoutput="true" passthru="true" checkreturn="true">
            <arg value="install"/>
        </exec>
    </target>

    <target name="composer-prod" description="Installs dependencies for production.">
        <exec executable="${path.composer.executable}" logoutput="true" passthru="true" checkreturn="true">
            <arg value="install"/>
            <arg value="--no-dev"/>
        </exec>
    </target>

    <target name="cron" description="Runs background jobs. Should be executed periodically by system Cron every 5 minutes.">
        <exec executable="${path.php.executable}" passthru="true" checkreturn="true">
            <arg value="${path.bin-console}"/>
            <arg value="shopsys:cron"/>
        </exec>
    </target>

    <target name="cron-list" description="Lists all available background jobs.">
        <exec executable="${path.php.executable}" passthru="true" checkreturn="true">
            <arg value="${path.bin-console}"/>
            <arg value="shopsys:cron"/>
            <arg value="--list"/>
        </exec>
    </target>

    <target name="db-check-mapping" depends="clean-redis" description="Checks if ORM mapping is valid." hidden="true">
        <exec executable="${path.php.executable}" passthru="true" checkreturn="true">
            <arg value="${path.bin-console}"/>
            <arg value="shopsys:migrations:check-mapping"/>
        </exec>
    </target>

    <target name="db-check-schema" depends="clean-redis,db-check-mapping" description="Checks if database schema is satisfying ORM and returns a list of suggestions to fix it." hidden="true">
        <exec executable="${path.php.executable}" passthru="true" checkreturn="true">
            <arg value="${path.bin-console}"/>
            <arg value="shopsys:migrations:check-schema"/>
        </exec>
    </target>

    <target name="db-create" depends="production-protection" description="Creates database for application with required configuration.">
        <exec executable="${path.php.executable}" passthru="true" checkreturn="true">
            <arg value="${path.bin-console}"/>
            <arg value="shopsys:database:create"/>
        </exec>
    </target>

    <target name="db-demo" depends="production-protection,db-wipe-public-schema,db-import-basic-structure,db-migrations,domains-data-create,db-fixtures-demo,plugin-demo-data-load,friendly-urls-generate,domains-urls-replace" description="Creates DB and fills it with demo data"/>

    <target name="db-fixtures-demo" depends="production-protection" description="Loads demo data fixtures." hidden="true">
        <exec executable="${path.php.executable}" passthru="true" checkreturn="true">
            <arg value="${path.bin-console}"/>
            <arg value="doctrine:fixtures:load"/>
            <arg value="--append"/>
            <arg value="--no-interaction"/>
        </exec>
        <exec executable="${path.php.executable}" passthru="true" checkreturn="true">
            <arg value="${path.bin-console}"/>
            <arg value="shopsys:recalculations"/>
        </exec>
    </target>

    <target name="db-import-basic-structure" description="Imports basic database structure (without migrations)." hidden="true">
        <exec executable="${path.php.executable}" passthru="true" checkreturn="true">
            <arg value="${path.bin-console}"/>
            <arg value="shopsys:schema:import-default"/>
        </exec>
    </target>

    <target name="db-migrations" description="Executes database migrations and checks schema.">
        <exec executable="${path.php.executable}" passthru="true" checkreturn="true">
            <arg value="${path.bin-console}"/>
            <arg value="shopsys:migrations:migrate"/>
        </exec>
    </target>

    <target name="db-migrations-count" description="Get count of database migrations to execute.">
        <exec executable="${path.php.executable}" passthru="true" checkreturn="true">
            <arg value="${path.bin-console}"/>
            <arg value="shopsys:migrations:count"/>
        </exec>
    </target>

    <target name="db-migrations-generate" depends="clean-redis,db-check-mapping" description="Generates migration file when DB schema is not satisfying ORM.">
        <exec executable="${path.php.executable}" passthru="true" checkreturn="true">
            <arg value="${path.bin-console}"/>
            <arg value="shopsys:migrations:generate"/>
        </exec>
    </target>

    <target name="db-rebuild" depends="production-protection,db-wipe-public-schema,db-import-basic-structure,db-migrations,domains-data-create,friendly-urls-generate,domains-urls-replace" description="Drops all data in database and creates a new one with base data only."/>

    <target name="db-wipe-public-schema" depends="production-protection" description="Drops and creates public database schema." hidden="true">
        <exec executable="${path.php.executable}" passthru="true" checkreturn="true">
            <arg value="${path.bin-console}"/>
            <arg value="shopsys:schema:drop"/>
        </exec>
        <exec executable="${path.php.executable}" passthru="true" checkreturn="true">
            <arg value="${path.bin-console}"/>
            <arg value="shopsys:schema:create"/>
        </exec>
    </target>

    <target name="diff-files" description="Finds changed files (against origin/master) and saves them into properties." hidden="true">
        <exec executable="${path.git.executable}" outputProperty="git.status.output" returnProperty="git.status.returnCode">
            <arg value="status"/>
        </exec>
        <if>
            <not>
                <equals arg1="${git.status.returnCode}" arg2="0"/>
            </not>
            <then>
                <echo level="error" message="Searching for changed files requires Git to be installed and the .git directory to be available."/>
                <echo level="info" message="By default, the .git directory is excluded from synchronization of files using docker-sync on Windows and Mac in order to deliver better performance and stability."/>
                <echo level="info" message="If that's your case, either remove '.git' from 'sync_excludes' in your 'docker-sync.yml' or use the target without the '-diff' suffix."/>
                <fail message="${git.status.output}"/>
            </then>
        </if>

        <exec executable="${path.git.executable}" outputProperty="git.merge.base">
            <arg value="merge-base"/>
            <arg value="origin/master"/>
            <arg value="HEAD"/>
        </exec>

        <exec executable="${path.git.executable}" outputProperty="git.files.changed">
            <arg value="diff"/>
            <arg value="--name-only"/>
            <arg value="--diff-filter=ACMR"/>
            <arg value="${git.merge.base}"/>
            <arg path="${path.app}"/>
            <arg path="${path.src}"/>
            <arg path="${path.tests}"/>
        </exec>

        <exec executable="${path.git.executable}" outputProperty="git.files.unstaged">
            <arg value="ls-files"/>
            <arg value="--others"/>
            <arg value="--exclude-standard"/>
            <arg path="${path.app}"/>
            <arg path="${path.src}"/>
            <arg path="${path.tests}"/>
            <arg path="${path.assets}"/>
        </exec>

        <property name="diff.files.all" value="${git.files.changed}${line.separator}${git.files.unstaged}">
            <filterchain>
                <!-- ignore Codeception generated class for running acceptance tests -->
                <linecontainsregexp>
                    <regexp pattern="^(?!tests/App/Test/Codeception/_generated/AcceptanceTesterActions.php).+$"/>
                </linecontainsregexp>
            </filterchain>
        </property>

        <property name="diff.files.js" value="${diff.files.all}">
            <filterchain>
                <linecontainsregexp>
                    <!-- linecontainsregexp splits lines using \n, so string can end with whitespace -->
                    <regexp pattern="\.js\s*$"/>
                </linecontainsregexp>
            </filterchain>
        </property>

        <property name="diff.files.php" value="${diff.files.all}">
            <filterchain>
                <linecontainsregexp>
                    <!-- linecontainsregexp splits lines using \n, so string can end with whitespace -->
                    <regexp pattern="\.php\s*$"/>
                </linecontainsregexp>
            </filterchain>
        </property>

        <property name="diff.files.twig" value="${diff.files.all}">
            <filterchain>
                <linecontainsregexp>
                    <!-- linecontainsregexp splits lines using \n, so string can end with whitespace -->
                    <regexp pattern="\.twig\s*$"/>
                </linecontainsregexp>
            </filterchain>
        </property>

        <property name="diff.files.all.spaces" value="${diff.files.all}">
            <filterchain>
                <replaceregexp>
                    <regexp pattern="[\r\n]+" replace=" "/>
                </replaceregexp>
            </filterchain>
        </property>

        <property name="diff.files.js.spaces" value="${diff.files.js}">
            <filterchain>
                <replaceregexp>
                    <regexp pattern="[\r\n]+" replace=" "/>
                </replaceregexp>
            </filterchain>
        </property>

        <property name="diff.files.php.spaces" value="${diff.files.php}">
            <filterchain>
                <replaceregexp>
                    <regexp pattern="[\r\n]+" replace=" "/>
                </replaceregexp>
            </filterchain>
        </property>

        <property name="diff.files.twig.spaces" value="${diff.files.twig}">
            <filterchain>
                <replaceregexp>
                    <regexp pattern="[\r\n]+" replace=" "/>
                </replaceregexp>
            </filterchain>
        </property>

        <property name="diff.files.php.commas" value="${diff.files.php}">
            <filterchain>
                <replaceregexp>
                    <regexp pattern="[\r\n]+" replace=","/>
                    <regexp pattern="^,|,$" replace=""/>
                </replaceregexp>
            </filterchain>
        </property>
    </target>

    <target name="dirs-create" description="Creates application directories for locks, docs, content, images, uploaded files, etc.">
        <exec executable="${path.php.executable}" passthru="true" checkreturn="true">
            <arg value="${path.bin-console}"/>
            <arg value="shopsys:create-directories"/>
        </exec>
    </target>

    <target name="domains-data-create" depends="domains-db-functions-create" description="Creates domains data for newly configured domains. You should run it when you modify domains.yaml">
        <exec executable="${path.php.executable}" passthru="true" checkreturn="true">
            <arg value="${path.bin-console}"/>
            <arg value="shopsys:domains-data:create"/>
        </exec>
    </target>

    <target name="domains-db-functions-create" description="Creates new domains DB functions." hidden="true">
        <exec executable="${path.php.executable}" passthru="true" checkreturn="true">
            <arg value="${path.bin-console}"/>
            <arg value="shopsys:domains-db-functions:create"/>
        </exec>
    </target>

    <target name="domains-info-load" description="Load info about domains configuration into Phing properties." hidden="true">
        <exec executable="${path.php.executable}" outputProperty="domains-info.ids" error="${dev.null}">
            <arg value="${path.bin-console}"/>
            <arg value="shopsys:domains:info"/>
            <arg value="--oneline"/>
        </exec>

        <exec executable="${path.php.executable}" outputProperty="domains-info.locales" error="${dev.null}">
            <arg value="${path.bin-console}"/>
            <arg value="shopsys:domains:info"/>
            <arg value="locale"/>
            <arg value="--deduplicate"/>
            <arg value="--oneline"/>
        </exec>

        <if>
            <matches string="${domains-info.ids}" pattern="\d+\s+\d+"/>
            <then>
                <property name="domains-info.is-multidomain" value="true"/>
            </then>
            <else>
                <property name="domains-info.is-multidomain" value="false"/>
            </else>
        </if>
    </target>

    <target name="domains-urls-replace" description="Replaces domains urls in database by urls in configuration. You should run it when you modify domains_urls.yaml">
        <exec executable="${path.php.executable}" passthru="true" checkreturn="true">
            <arg value="${path.bin-console}"/>
            <arg value="shopsys:domains-urls:replace"/>
        </exec>
    </target>

    <target name="ecs" description="Checks coding standards in all files by PHP easy coding standards." hidden="true">
        <exec executable="${path.ecs.executable}" logoutput="true" passthru="true" checkreturn="true">
            <arg value="check"/>
            <arg value="--clear-cache"/>
            <arg path="${path.app}"/>
            <arg path="${path.src}"/>
            <arg path="${path.tests}"/>
            <arg path="${path.root}/*.md"/>
            <arg path="${path.root}/docs"/>
        </exec>
    </target>

    <target name="ecs-diff" description="Checks coding standards in changed files by PHP easy coding standards." hidden="true">
        <exec executable="${path.ecs.executable}" logoutput="true" passthru="true" checkreturn="true">
            <arg value="check"/>
            <arg path="${path.app}"/>
            <arg path="${path.src}"/>
            <arg path="${path.tests}"/>
            <arg path="${path.root}/*.md"/>
            <arg path="${path.root}/docs"/>
        </exec>
    </target>

    <target name="ecs-fix" description="Checks and fixes automatically fixable coding standards in all files by PHP easy coding standards." hidden="true">
        <exec executable="${path.ecs.executable}" logoutput="true" passthru="true" checkreturn="true">
            <arg value="check"/>
            <arg value="--clear-cache"/>
            <arg value="--fix"/>
            <arg path="${path.app}"/>
            <arg path="${path.src}"/>
            <arg path="${path.tests}"/>
            <arg path="${path.root}/*.md"/>
            <arg path="${path.root}/docs"/>
        </exec>
    </target>

    <target name="ecs-fix-diff" description="Checks and fixes automatically fixable coding standards in changed files by PHP easy coding standards." hidden="true">
        <exec executable="${path.ecs.executable}" logoutput="true" passthru="true" checkreturn="true">
            <arg value="check"/>
            <arg value="--fix"/>
            <arg path="${path.app}"/>
            <arg path="${path.src}"/>
            <arg path="${path.tests}"/>
            <arg path="${path.root}/*.md"/>
            <arg path="${path.root}/docs"/>
        </exec>
    </target>

    <target name="elasticsearch-export" description="Exports indexes data into elasticsearch.">
        <property name="elasticsearch.index" value=""/>
        <exec executable="${path.php.executable}" passthru="true" checkreturn="true">
            <arg value="${path.bin-console}"/>
            <arg value="shopsys:elasticsearch:data-export"/>
            <arg value="${elasticsearch.index}"/>
        </exec>
    </target>

    <target name="elasticsearch-export-changed" description="Exports only changed indexes data into elasticsearch.">
        <property name="elasticsearch.index" value=""/>
        <exec executable="${path.php.executable}" passthru="true" checkreturn="true">
            <arg value="${path.bin-console}"/>
            <arg value="shopsys:elasticsearch:changed-data-export"/>
            <arg value="${elasticsearch.index}"/>
        </exec>
    </target>

    <target name="elasticsearch-index-create" description="Creates indexes into elasticsearch." hidden="true">
        <property name="elasticsearch.index" value=""/>
        <exec executable="${path.php.executable}" passthru="true" checkreturn="true">
            <arg value="${path.bin-console}"/>
            <arg value="shopsys:elasticsearch:indexes-create"/>
            <arg value="${elasticsearch.index}"/>
        </exec>
    </target>

    <target name="elasticsearch-index-delete" depends="production-protection" description="Deletes indexes from elasticsearch." hidden="true">
        <property name="elasticsearch.index" value=""/>
        <exec executable="${path.php.executable}" passthru="true" checkreturn="true">
            <arg value="${path.bin-console}"/>
            <arg value="shopsys:elasticsearch:indexes-delete"/>
            <arg value="${elasticsearch.index}"/>
        </exec>
    </target>

    <target name="elasticsearch-index-migrate" description="Creates new indexes, reindex them from old one, deletes old indexes and add alias to the new one.">
        <property name="elasticsearch.index" value=""/>
        <exec executable="${path.php.executable}" passthru="true" checkreturn="true">
            <arg value="${path.bin-console}"/>
            <arg value="shopsys:elasticsearch:indexes-migrate"/>
            <arg value="${elasticsearch.index}"/>
        </exec>
    </target>

    <target name="elasticsearch-index-recreate" depends="production-protection, elasticsearch-index-delete, elasticsearch-index-create" description="Recreates indexes into elasticsearch (deletes existing indexes and creates new one)"/>

    <target name="environment-load" description="Load application environment into Phing property." hidden="true">
        <if>
            <not><isset property="environment"/></not>
            <then>
                <exec command="php ${path.app}/getEnvironment.php" outputProperty="environment"/>

                <property name="environment" value="${environment}"/>
                <echo>Current environment: ${environment}</echo>
            </then>
        </if>
    </target>

    <target name="error-pages-generate" depends="prod-warmup,redis-check" description="Generates error pages displayed in production environment.">
        <exec executable="${path.php.executable}" passthru="true" checkreturn="true">
            <arg value="${path.bin-console}"/>
            <arg value="shopsys:error-page:generate-all"/>
        </exec>
    </target>

    <target name="eslint-check" description="Find JS coding standard violations in all files using ESLint and print human readable output." hidden="true">
        <exec executable="${path.eslint.executable}" passthru="true" checkreturn="true">
            <arg value="--color"/>
            <arg path="${path.assets}"/>
            <arg value="--config"/>
            <arg path="${path.root}/.eslintrc.json"/>
            <arg value="--ignore-path"/>
            <arg path="${path.root}/.eslintignore"/>
        </exec>
    </target>

    <target name="eslint-check-diff" depends="diff-files" description="Find JS coding standard violations in changed files using ESLint and print human readable output." hidden="true">
        <if>
            <not>
                <equals arg1="${diff.files.js.spaces}" arg2="" trim="true"/>
            </not>
            <then>
                <exec executable="${path.eslint.executable}" passthru="true" checkreturn="true">
                    <arg value="--color"/>
                    <arg line="${diff.files.js.spaces}"/>
                    <arg value="--config"/>
                    <arg path="${path.root}/.eslintrc.json"/>
                    <arg value="--ignore-path"/>
                    <arg path="${path.root}/.eslintignore"/>
                </exec>
            </then>
        </if>
    </target>

    <target name="eslint-fix" description="Fix JS coding standard violations in all files using ESLint." hidden="true">
        <exec executable="${path.eslint.executable}" passthru="true" checkreturn="true">
            <arg value="--color"/>
            <arg value="--fix"/>
            <arg path="${path.assets}"/>
            <arg value="--config"/>
            <arg path="${path.root}/.eslintrc.json"/>
            <arg value="--ignore-path"/>
            <arg path="${path.root}/.eslintignore"/>
        </exec>
    </target>

    <target name="eslint-fix-diff" depends="diff-files" description="Fix JS coding standard violations in changed files using ESLint." hidden="true">
        <if>
            <not>
                <equals arg1="${diff.files.js.spaces}" arg2="" trim="true"/>
            </not>
            <then>
                <exec executable="${path.eslint.executable}" passthru="true" checkreturn="true">
                    <arg value="--color"/>
                    <arg value="--fix"/>
                    <arg line="${diff.files.js.spaces}"/>
                    <arg value="--config"/>
                    <arg path="${path.root}/.eslintrc.json"/>
                    <arg value="--ignore-path"/>
                    <arg path="${path.root}/.eslintignore"/>
                </exec>
            </then>
        </if>
    </target>

    <target name="friendly-urls-generate" description="Generates friendly urls for supported entities when missing.">
        <exec executable="${path.php.executable}" passthru="true" checkreturn="true">
            <arg value="${path.bin-console}"/>
            <arg value="shopsys:generate:friendly-url"/>
        </exec>
    </target>

    <target name="list" description="Hidden target to make Phing list all targets when called without an argument." hidden="true">
        <exec executable="${path.php.executable}" passthru="true" checkreturn="true">
            <arg value="phing"/>
            <arg value="-l"/>
        </exec>
    </target>

    <target name="maintenance-off" description="Turns the maintenance page off.">
        <delete file="${path.root}/MAINTENANCE"/>
    </target>

    <target name="maintenance-on" description="Turns the maintenance page on.">
        <touch file="${path.root}/MAINTENANCE"/>
    </target>

    <target name="npm" description="Build node modules.">
        <phingcall target="npm-install-dependencies"/>
        <phingcall target="npm-export-translations"/>

        <exec executable="${path.npm.executable}" dir="${path.root}" logoutput="true" passthru="true" checkreturn="true">
            <arg value="run"/>
            <arg value="copy-assets"/>
        </exec>

        <exec executable="${path.npm.executable}" dir="${path.root}" logoutput="true" passthru="true" checkreturn="true">
            <arg value="run"/>
            <arg value="build"/>
        </exec>
    </target>

    <target name="npm-dev" description="Compile assets for development (without minification and with generated source maps).">
        <exec executable="${path.npm.executable}" dir="${path.root}" logoutput="true" passthru="true" checkreturn="true">
            <arg value="run"/>
            <arg value="dev"/>
        </exec>
    </target>

    <target name="npm-export-translations" description="Exported used translations for javascripts." hidden="true">
        <exec executable="${path.npm.executable}" dir="${path.root}" logoutput="true" passthru="true" checkreturn="true">
            <arg value="run"/>
            <arg value="trans"/>
            <arg value="--"/>
            <arg value="source-dir=${path.assets}/**/*.js"/>
            <arg value="source-dir=${path.framework.assets}/js/**/*.js"/>
            <arg value="translations-dir=${path.root}/translations/*.po"/>
            <arg value="translations-dir=${path.framework}/src/Resources/translations/*.po"/>
        </exec>
    </target>

    <target name="npm-install-dependencies" description="Installs node modules dependencies." hidden="true">
        <exec executable="${path.npm.executable}" dir="${path.root}" logoutput="true" passthru="true" checkreturn="true">
            <arg value="install"/>
        </exec>
    </target>

    <target name="npm-prod" description="Compile assets for production.">
        <exec executable="${path.npm.executable}" dir="${path.root}" logoutput="true" passthru="true" checkreturn="true">
            <arg value="run"/>
            <arg value="build"/>
        </exec>
    </target>

    <target name="npm-translations-dump" description="Dumped translations from javascript's files." hidden="true">
        <exec executable="${path.npm.executable}" dir="${path.root}" logoutput="true" passthru="true" checkreturn="true">
            <arg value="run"/>
            <arg value="trans:dump"/>
            <arg value="--"/>
            <arg value="source-dir=${path.assets}/**/*.js"/>
            <arg value="export-dir=${path.var}/translations/projectBase/"/>
        </exec>
    </target>

    <target name="npm-watch" description="Recompile assets automatically when files change.">
        <exec executable="${path.npm.executable}" dir="${path.root}" logoutput="true" passthru="true" checkreturn="true">
            <arg value="run"/>
            <arg value="watch"/>
        </exec>
    </target>

    <target name="phplint" description="Checks syntax of PHP files." hidden="true">
        <exec executable="${path.phplint.executable}" logoutput="true" passthru="true" checkreturn="true">
            <arg path="${path.app}"/>
            <arg path="${path.src}"/>
            <arg path="${path.tests}"/>
        </exec>
    </target>

    <target name="phplint-diff" depends="diff-files" description="Checks syntax of changed PHP files." hidden="true">
        <if>
            <not>
                <equals arg1="${diff.files.php.spaces}" arg2="" trim="true"/>
            </not>
            <then>
                <exec executable="${path.phplint.executable}" logoutput="true" passthru="true" checkreturn="true">
                    <arg line="${diff.files.php.spaces}"/>
                </exec>
            </then>
        </if>
    </target>

    <target name="phpstan" depends="warmup,tests-acceptance-build" description="Performs static analysis of PHP files using PHPStan." hidden="true">
        <exec executable="${path.phpstan.executable}" logoutput="true" passthru="true" checkreturn="true">
            <arg value="analyze"/>

            <arg value="-c"/>
            <arg path="${path.phpstan.config}"/>

            <arg path="${path.app}"/>
            <arg path="${path.src}"/>
            <arg path="${path.tests}"/>

            <arg value="--level=${phpstan.level}"/>
            <arg value="--memory-limit=${phpstan.memory-limit}"/>
            <arg value="-vvv"/>
        </exec>
    </target>

    <target name="plugin-demo-data-load" description="Loads data fixtures of all registered plugins." hidden="true">
        <exec executable="${path.php.executable}" passthru="true" checkreturn="true">
            <arg value="${path.bin-console}"/>
            <arg value="shopsys:plugin-data-fixtures:load"/>
        </exec>
    </target>

    <target name="prod-warmup" description="Warms up cache for production environment." hidden="true">
        <exec executable="${path.php.executable}" passthru="true" checkreturn="true">
            <arg value="${path.bin-console}"/>
            <arg value="cache:warmup"/>
            <arg value="--env=prod"/>
        </exec>
    </target>

    <target name="production-protection" depends="environment-load" description="Asks user for confirmation when he or she wants to run a particular action in production environment" hidden="true">
        <if>
            <equals arg1="${environment}" arg2="prod"/>
            <then>
                <if>
                    <not><isset property="production.confirm.action"/></not>
                    <then>
                        <input propertyName="production.confirm.action" validArgs="y,n" defaultValue="n" message="Warning! You are now in production environment and performing action that is not supposed to be ran in this environment! Are you sure you want to continue?"/>
                    </then>
                </if>
                <if>
                    <not><equals arg1="${production.confirm.action}" arg2="y"/></not>
                    <then>
                        <fail message="Terminated by user"/>
                    </then>
                </if>
            </then>
        </if>
    </target>

    <target name="redis-check" description="Checks availability of Redis" hidden="true">
        <exec executable="${path.php.executable}" passthru="true" checkreturn="true">
            <arg value="${path.bin-console}"/>
            <arg value="shopsys:redis:check-availability"/>
        </exec>
    </target>

    <target name="selenium-run" description="Runs the Selenium server for acceptance testing. ChromeDriver is required. Only for native installation (Selenium is always running in Docker setup).">
        <exec executable="${path.chromedriver.executable}" logoutput="true" passthru="true" checkreturn="true">
            <arg value="--port=4444"/>
            <arg value="--url-base=wd/hub"/>
        </exec>
    </target>

    <target name="server-run" description="Runs Symfony Local Web Server for the first domain. Only for native installation (webserver is always running in Docker setup).">
        <exec executable="symfony" passthru="true" returnProperty="symfony.return.code">
            <arg value="server:start"/>
        </exec>
        <if>
            <isfailure code="${symfony.return.code}"/>
            <then>
                <echo level="warning" message="Local web server cannot be started."/>
                <echo level="info" message="Is 'symfony' executable available? You can follow official installation instructions: https://symfony.com/doc/current/setup/symfony_server.html#installation"/>
                <fail/>
            </then>
        </if>
    </target>

    <target name="standards" depends="phplint,ecs,annotations-check,phpstan,twig-lint,yaml-standards,eslint-check" description="Checks coding standards."/>

    <target name="standards-diff" depends="phplint-diff,ecs-diff,annotations-check,phpstan,twig-lint-diff,yaml-standards,eslint-check-diff" description="Checks coding standards in changed files."/>

    <target name="standards-fix" depends="ecs-fix,annotations-fix,yaml-standards-fix,eslint-fix" description="Automatically fixes *some* coding standards violations in all files. Always run 'standards' to be sure there are no further violations."/>

    <target name="standards-fix-diff" depends="ecs-fix-diff,annotations-fix,yaml-standards-fix,eslint-fix-diff" description="Automatically fixes *some* coding standards violations in changed files. Always run 'standards' to be sure there are no further violations."/>

    <target name="stylelint" description="Checks conventions in styles">
        <exec executable="${path.stylelint.executable}" logoutput="true" passthru="true" checkreturn="true" dir="${path.root}">
            <arg value="--color"/>
            <arg path="${path.src}/**/*.less"/>
        </exec>
    </target>

    <target name="stylelint-fix" description="Checks conventions in styles and fixes the violations automatically if possible">
        <exec executable="${path.stylelint.executable}" logoutput="true" passthru="true" checkreturn="true" dir="${path.root}">
            <arg path="${path.src}/**/*.less"/>
            <arg value="--fix"/>
        </exec>
    </target>

    <target name="test-db-create" depends="production-protection" description="Creates test database for application with required configuration.">
        <exec executable="${path.php.executable}" passthru="true" checkreturn="true">
            <arg value="${path.bin-console}"/>
            <arg value="shopsys:database:create"/>
            <arg value="--env=test"/>
        </exec>
    </target>

    <target name="test-db-demo" depends="production-protection,clean,clean-redis,test-db-wipe-public-schema,test-db-import-basic-structure,test-db-migrations,test-domains-data-create,test-db-fixtures-demo,test-friendly-urls-generate,test-plugin-demo-data-load,test-domains-urls-replace" description="Drops all data in test database and creates a new one with demo data." hidden="true"/>

    <target name="test-db-dump" depends="production-protection" description="Dumps current test database into a file to be used in acceptance tests." hidden="true">
        <exec executable="${path.php.executable}" passthru="true" checkreturn="true">
            <arg value="${path.bin-console}"/>
            <arg value="--env=test"/>
            <arg value="shopsys:database:dump"/>
            <arg value="--pgdump-bin=${path.pg_dump.executable}"/>
            <arg value="${path.test.database.dump}"/>
        </exec>
    </target>

    <target name="test-db-fixtures-demo" depends="production-protection" description="Loads demo data fixtures into test DB." hidden="true">
        <exec executable="${path.php.executable}" passthru="true" checkreturn="true">
            <arg value="${path.bin-console}"/>
            <arg value="--env=test"/>
            <arg value="doctrine:fixtures:load"/>
            <arg value="--append"/>
            <arg value="--no-interaction"/>
        </exec>
        <exec executable="${path.php.executable}" passthru="true" checkreturn="true">
            <arg value="${path.bin-console}"/>
            <arg value="shopsys:recalculations"/>
            <arg value="--env=test"/>
        </exec>
    </target>

    <target name="test-db-fixtures-performance" depends="production-protection" description="Loads performance data fixtures into test DB." hidden="true">
        <exec executable="${path.php.executable}" passthru="true" checkreturn="true">
            <arg value="${path.bin-console}"/>
            <arg value="--env=test"/>
            <arg value="shopsys:performance-data"/>
        </exec>
        <exec executable="${path.php.executable}" passthru="true" checkreturn="true">
            <arg value="${path.bin-console}"/>
            <arg value="--env=test"/>
            <arg value="shopsys:recalculations"/>
        </exec>
    </target>

    <target name="test-db-import-basic-structure" depends="production-protection" description="Imports basic database structure (without migrations) into test database." hidden="true">
        <exec executable="${path.php.executable}" passthru="true" checkreturn="true">
            <arg value="${path.bin-console}"/>
            <arg value="--env=test"/>
            <arg value="shopsys:schema:import-default"/>
        </exec>
    </target>

    <target name="test-db-migrations" depends="production-protection" description="Executes test database migrations and checks schema." hidden="true">
        <exec executable="${path.php.executable}" passthru="true" checkreturn="true">
            <arg value="${path.bin-console}"/>
            <arg value="--env=test"/>
            <arg value="shopsys:migrations:migrate"/>
        </exec>
    </target>

    <target name="test-db-performance" depends="production-protection,test-db-demo,test-db-fixtures-performance" description="Drops all data in test database and creates a new one with performance data."/>

    <target name="test-db-wipe-public-schema" description="Drops and creates public database schema in test database." hidden="true">
        <exec executable="${path.php.executable}" passthru="true" checkreturn="true">
            <arg value="${path.bin-console}"/>
            <arg value="--env=test"/>
            <arg value="shopsys:schema:drop"/>
        </exec>
        <exec executable="${path.php.executable}" passthru="true" checkreturn="true">
            <arg value="${path.bin-console}"/>
            <arg value="--env=test"/>
            <arg value="shopsys:schema:create"/>
        </exec>
    </target>

    <target name="test-dirs-create" depends="production-protection" description="Creates application directories for content, images, uploaded files, etc. for test environment" hidden="true">
        <exec executable="${path.php.executable}" passthru="true" checkreturn="true">
            <arg value="${path.bin-console}"/>
            <arg value="--env=test"/>
            <arg value="shopsys:create-directories"/>
        </exec>
    </target>

    <target name="test-domains-data-create" depends="production-protection,test-domains-db-functions-create" description="Creates domains data in tests DB for newly configured domains." hidden="true">
        <exec executable="${path.php.executable}" passthru="true" checkreturn="true">
            <arg value="${path.bin-console}"/>
            <arg value="shopsys:domains-data:create"/>
            <arg value="--env=test"/>
        </exec>
    </target>

    <target name="test-domains-db-functions-create" depends="production-protection" description="Creates new domains DB functions in test database." hidden="true">
        <exec executable="${path.php.executable}" passthru="true" checkreturn="true">
            <arg value="${path.bin-console}"/>
            <arg value="shopsys:domains-db-functions:create"/>
            <arg value="--env=test"/>
        </exec>
    </target>

    <target name="test-domains-urls-replace" depends="production-protection" description="Replaces domains urls in test database by urls in configuration." hidden="true">
        <exec executable="${path.php.executable}" passthru="true" checkreturn="true">
            <arg value="${path.bin-console}"/>
            <arg value="--env=test"/>
            <arg value="shopsys:domains-urls:replace"/>
        </exec>
    </target>

    <target name="test-elasticsearch-export" description="Exports indexes data into elasticsearch for test environment.">
        <property name="elasticsearch.index" value=""/>
        <exec executable="${path.php.executable}" passthru="true" checkreturn="true">
            <arg value="${path.bin-console}"/>
            <arg value="--env=test"/>
            <arg value="shopsys:elasticsearch:data-export"/>
            <arg value="${elasticsearch.index}"/>
        </exec>
    </target>

    <target name="test-elasticsearch-index-create" description="Creates indexes into elasticsearch for test environment." hidden="true">
        <property name="elasticsearch.index" value=""/>
        <exec executable="${path.php.executable}" passthru="true" checkreturn="true">
            <arg value="${path.bin-console}"/>
            <arg value="--env=test"/>
            <arg value="shopsys:elasticsearch:indexes-create"/>
            <arg value="${elasticsearch.index}"/>
        </exec>
    </target>

    <target name="test-elasticsearch-index-delete" depends="production-protection" description="Deletes indexes from elasticsearch for test environment." hidden="true">
        <property name="elasticsearch.index" value=""/>
        <exec executable="${path.php.executable}" passthru="true" checkreturn="true">
            <arg value="${path.bin-console}"/>
            <arg value="--env=test"/>
            <arg value="shopsys:elasticsearch:indexes-delete"/>
            <arg value="${elasticsearch.index}"/>
        </exec>
    </target>

    <target name="test-elasticsearch-index-recreate" depends="production-protection,test-elasticsearch-index-delete,test-elasticsearch-index-create" description="Recreates structure for searching via elasticsearch in test environment (deletes existing structure and creates new one)"/>

    <target name="test-friendly-urls-generate" depends="production-protection" description="Generates friendly urls for supported entities when missing in test DB." hidden="true">
        <exec executable="${path.php.executable}" passthru="true" checkreturn="true">
            <arg value="${path.bin-console}"/>
            <arg value="--env=test"/>
            <arg value="shopsys:generate:friendly-url"/>
        </exec>
    </target>

    <target name="test-plugin-demo-data-load" depends="production-protection" description="Loads data fixtures of all registered plugins into test DB." hidden="true">
        <exec executable="${path.php.executable}" passthru="true" checkreturn="true">
            <arg value="${path.bin-console}"/>
            <arg value="--env=test"/>
            <arg value="shopsys:plugin-data-fixtures:load"/>
        </exec>
    </target>

    <target name="tests" depends="npm-install-dependencies,test-db-demo,test-elasticsearch-index-recreate,test-elasticsearch-export,error-pages-generate,tests-unit,tests-functional,tests-smoke" description="Runs unit, functional and smoke tests. Builds new test database in the process."/>

    <target name="tests-acceptance" depends="production-protection,clean,clean-redis,test-db-dump" description="Runs acceptance tests. Running Selenium server is required (Selenium is always running in Docker setup).">
        <available file="${path.env.test}" type="file" property="path.env.test.existed"/>
        <if>
            <not>
                <equals arg1="${path.env.test.existed}" arg2="true"/>
            </not>
            <then>
                <touch file="${path.root}/TEST"/>
            </then>
        </if>

        <trycatch>
            <try>
                <exec executable="${path.codeception.executable}" logoutput="true" passthru="true" checkreturn="true">
                    <arg value="run"/>
                    <arg value="--config=${path.codeception.configuration}"/>
                </exec>
            </try>
            <finally>
                <if>
                    <not>
                        <equals arg1="${path.env.test.existed}" arg2="true"/>
                    </not>
                    <then>
                        <delete file="${path.root}/TEST"/>
                    </then>
                </if>
            </finally>
        </trycatch>
    </target>

    <target name="tests-acceptance-build" depends="production-protection" description="Generates AcceptanceTesterActions.php (execute after change of Codeception modules, eg. StrictWebDriver)." hidden="true">
        <exec executable="${path.codeception.executable}" logoutput="true" passthru="true" checkreturn="true">
            <arg value="build"/>
            <arg value="--config=${path.codeception.configuration}"/>
        </exec>
    </target>

    <target name="tests-functional" depends="production-protection,clean,clean-redis,domains-info-load" description="Runs functional tests.">
        <if>
            <istrue value="${domains-info.is-multidomain}"/>
            <then>
                <exec executable="${path.phpunit.executable}" logoutput="true" passthru="true" checkreturn="true">
                    <arg value="--colors=always"/>
                    <arg value="--testsuite"/>
                    <arg value="Functional"/>
                    <arg value="--exclude-group"/>
                    <arg value="singledomain"/>
                    <arg value="--configuration"/>
                    <arg value="${path.root}/phpunit.xml"/>
                </exec>
            </then>
            <else>
                <exec executable="${path.phpunit.executable}" logoutput="true" passthru="true" checkreturn="true">
                    <arg value="--colors=always"/>
                    <arg value="--testsuite"/>
                    <arg value="Functional"/>
                    <arg value="--exclude-group"/>
                    <arg value="multidomain"/>
                    <arg value="--configuration"/>
                    <arg value="${path.root}/phpunit.xml"/>
                </exec>
            </else>
        </if>
    </target>

    <target name="tests-performance" depends="production-protection,clean,clean-redis" description="Runs performance tests (assuming test DB has been filled with performance data and warmed up, see 'tests-performance-run').">
        <exec executable="${path.phpunit.executable}" logoutput="true" passthru="true" checkreturn="true">
            <arg value="--colors=always"/>
            <arg value="--testsuite"/>
            <arg value="Performance"/>
            <arg value="--exclude-group"/>
            <arg value="warmup"/>
            <arg value="--configuration"/>
            <arg value="${path.root}/phpunit.xml"/>
        </exec>
    </target>

    <target name="tests-performance-run" depends="production-protection,clean,clean-redis,test-db-performance,test-elasticsearch-index-recreate,test-elasticsearch-export,tests-performance-warmup,tests-performance" description="Runs performance tests. Builds new test database with performance data in the process."/>

    <target name="tests-performance-warmup" description="Warms up cache for performance tests.">
        <exec executable="${path.phpunit.executable}" logoutput="true" passthru="true" checkreturn="true">
            <arg value="--colors=always"/>
            <arg value="--testsuite"/>
            <arg value="Performance"/>
            <arg value="--group"/>
            <arg value="warmup"/>
            <arg value="--configuration"/>
            <arg value="${path.root}/phpunit.xml"/>
        </exec>
    </target>

    <target name="tests-smoke" depends="production-protection,clean,clean-redis,domains-info-load" description="Runs smoke tests.">
        <if>
            <istrue value="${domains-info.is-multidomain}"/>
            <then>
                <exec executable="${path.phpunit.executable}" logoutput="true" passthru="true" checkreturn="true">
                    <arg value="--colors=always"/>
                    <arg value="--testsuite"/>
                    <arg value="Smoke"/>
                    <arg value="--exclude-group"/>
                    <arg value="singledomain"/>
                    <arg value="--configuration"/>
                    <arg value="${path.root}/phpunit.xml"/>
                </exec>
            </then>
            <else>
                <exec executable="${path.phpunit.executable}" logoutput="true" passthru="true" checkreturn="true">
                    <arg value="--colors=always"/>
                    <arg value="--testsuite"/>
                    <arg value="Smoke"/>
                    <arg value="--exclude-group"/>
                    <arg value="multidomain"/>
                    <arg value="--configuration"/>
                    <arg value="${path.root}/phpunit.xml"/>
                </exec>
            </else>
        </if>
    </target>

    <target name="tests-unit" depends="production-protection,clean,tests-unit-jest" description="Runs unit tests.">
        <exec executable="${path.phpunit.executable}" logoutput="true" passthru="true" checkreturn="true">
            <arg value="--colors=always"/>
            <arg value="--testsuite"/>
            <arg value="Unit"/>
            <arg value="--configuration"/>
            <arg value="${path.root}/phpunit.xml"/>
        </exec>
    </target>

    <target name="tests-unit-jest" description="Runs js's unit tests.">
        <exec executable="${path.npm.executable}" dir="${path.root}" logoutput="true" passthru="true" checkreturn="true">
            <arg value="run"/>
            <arg value="tests:unit"/>
        </exec>
    </target>

    <target name="timezones-check" description="Checks uniformity of PHP and Postgres timezones." hidden="true">
        <exec executable="${path.php.executable}" passthru="true" checkreturn="true">
            <arg value="${path.bin-console}"/>
            <arg value="shopsys:check-timezones"/>
        </exec>
    </target>

    <target name="translations-dump" depends="domains-info-load" description="Extracts translatable messages from all source files in your project.">
        <phingcall target="npm-translations-dump"/>
        <exec executable="${path.php.executable}" passthru="true" checkreturn="true">
            <arg value="${path.bin-console}"/>
            <arg value="translation:extract"/>
            <arg value="--dir=${path.src}"/>
            <arg value="--dir=${path.templates}"/>
            <arg value="--dir=${path.var}/translations/projectBase"/>
            <arg value="--exclude-dir=frontend/plugins"/>
            <arg value="--exclude-dir=styleguide/plugins"/>
            <arg value="--output-format=po"/>
            <arg value="--output-dir=${path.root}/translations"/>
            <arg line="${translations.dump.flags}"/>
            <arg line="${domains-info.locales}"/>
        </exec>
    </target>

    <target name="twig-lint" description="Checks syntax of Twig templates." hidden="true">
        <exec executable="${path.php.executable}" passthru="true" checkreturn="true">
            <arg value="${path.bin-console}"/>
            <arg value="lint:twig"/>
            <arg value="${path.templates}"/>
        </exec>
    </target>

    <target name="twig-lint-diff" depends="diff-files" description="Checks syntax of changed Twig templates." hidden="true">
        <if>
            <not>
                <equals arg1="${diff.files.twig.spaces}" arg2="" trim="true"/>
            </not>
            <then>
                <exec executable="${path.php.executable}" passthru="true" checkreturn="true">
                    <arg value="${path.bin-console}"/>
                    <arg value="lint:twig"/>
                    <arg line="${diff.files.twig.spaces}"/>
                </exec>
            </then>
        </if>
    </target>

    <target name="warmup" description="Warms up cache.">
        <exec executable="${path.php.executable}" passthru="true" checkreturn="true">
            <arg value="${path.bin-console}"/>
            <arg value="cache:warmup"/>
        </exec>
    </target>

    <target name="wipe" depends="production-protection,wipe-excluding-logs" description="Wipes out all generated and/or uploaded files.">
        <delete failonerror="false" includeemptydirs="true">
            <fileset dir="${path.var}/log/"/>
        </delete>
    </target>

    <target name="wipe-excluding-logs" depends="production-protection,clean,clean-styles" description="Wipes out all generated and/or uploaded files except for logs.">
        <delete failonerror="false" includeemptydirs="true">
            <fileset dir="${path.var}/">
                <exclude name=".gitkeep"/>
                <exclude name="log/**"/>
                <exclude name="postgres-data/**"/>
                <exclude name="elasticsearch-data/**"/>
            </fileset>
            <fileset dir="${path.build.stats}/">
                <exclude name="/"/>
            </fileset>
            <fileset dir="${path.root}/docs/generated/">
                <exclude name="/"/>
            </fileset>
            <fileset dir="${path.web}/components/">
                <exclude name="/"/>
            </fileset>
            <fileset dir="${path.web}/content/">
                <exclude name="/"/>
            </fileset>
            <fileset dir="${path.web}/content-test/">
                <exclude name="/"/>
            </fileset>
        </delete>
    </target>

    <target name="yaml-lint" description="Checks syntax of Yaml files." hidden="true">
        <exec executable="${path.php.executable}" passthru="true" checkreturn="true">
            <arg value="${path.bin-console}"/>
            <arg value="lint:yaml"/>
            <arg value="${path.src}"/>
            <arg value="--parse-tags"/>
        </exec>
        <exec executable="${path.php.executable}" passthru="true" checkreturn="true">
            <arg value="${path.bin-console}"/>
            <arg value="lint:yaml"/>
            <arg value="${path.config}"/>
            <arg value="--parse-tags"/>
        </exec>
    </target>

    <target name="yaml-standards" depends="yaml-lint" description="Checks YAML standards (needs sspooky13/yaml-standards)" hidden="true">
        <available file="${path.yaml-standards.executable}" type="file" property="yaml-standards.executable.exists"/>
        <if>
            <equals arg1="${yaml-standards.executable.exists}" arg2="true"/>
            <then>
                <exec executable="${path.yaml-standards.executable}" logoutput="true" passthru="true" checkreturn="true">
                    <arg value="${yaml-standards.args}"/>
                </exec>
            </then>
            <else>
                <echo level="warning" message="The executable '${path.yaml-standards.executable}' is not available, your YAML files cannot be checked."/>
                <echo level="info" message="You can require the package using Composer, run 'composer require --dev sspooky13/yaml-standards'"/>
            </else>
        </if>
    </target>

    <target name="yaml-standards-fix" description="Checks YAML standards and fixes the violations automatically if possible" hidden="true">
        <property name="yaml-standards.args" value="--fix" override="true"/>
        <phingcall target="yaml-standards"/>
    </target>
</project>
