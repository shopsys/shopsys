MutationDecorator:
    type: object
    decorator: true
    config:
        fields:
            CreateOrder:
                type: CreateOrderResult!
                description: "Creates complete order with products and addresses"
                args:
                    input:
                        type: OrderInput!
                        validation: cascade
                resolve: "@=mutation('createOrderMutation', args, validator)"
            Login:
                type: LoginResult!
                description: "Login user and return login result data (consisting of access and refresh tokens, and information about cart merge)"
                args:
                    input:
                        type: LoginInput!
                resolve: "@=mutation('loginMutation', args)"
            Logout:
                type: Boolean!
                description: "Logout user"
                resolve: "@=mutation('logoutMutation')"
            RefreshTokens:
                type: Token!
                description: "Refreshes access and refresh tokens"
                args:
                    input:
                        type: RefreshTokenInput!
                resolve: "@=mutation('refreshTokensMutation', args)"
            ChangePassword:
                type: 'CurrentCustomerUser!'
                description: "Changes customer user password"
                args:
                    input:
                        type: ChangePasswordInput!
                        validation: cascade
                resolve: "@=mutation('changePasswordMutation', args, validator)"
            ChangePersonalData:
                type: 'CustomerUser!'
                description: "Changes customer user personal data"
                args:
                    input:
                        type: ChangePersonalDataInput!
                        validation: cascade
                access: "@=isGranted('ROLE_API_ALL')"
                resolve: "@=mutation('changePersonalDataMutation', args, validator)"
            Register:
                type: 'LoginResult!'
                description: "Register new customer user"
                args:
                    input:
                        type: RegistrationDataInput!
                        validation: cascade
                resolve: "@=mutation('registerMutation', args, validator)"
            RegisterByOrder:
                type: 'LoginResult!'
                description: "Register new customer user using an order data"
                args:
                    input:
                        type: RegistrationByOrderInput!
                        validation: cascade
                resolve: "@=mutation('registerByOrderMutation', args)"
            NewsletterSubscribe:
                type: Boolean!
                description: "Subscribe for e-mail newsletter"
                args:
                    input:
                        type: NewsletterSubscriptionDataInput!
                        validation: cascade
                resolve: "@=mutation('newsletterSubscribeMutation', args, validator)"
            AddProductToList:
                type: ProductList!
                description: "Adds a product to a product list"
                args:
                    input:
                        type: ProductListUpdateInput!
                resolve: "@=mutation('addProductToListMutation', args)"
            RemoveProductFromList:
                type: ProductList
                description: "Removes a product from a product list"
                args:
                    input:
                        type: ProductListUpdateInput!
                resolve: "@=mutation('removeProductFromListMutation', args)"
            RemoveProductList:
                type: ProductList
                description: "Removes the product list"
                args:
                    input:
                        type: ProductListInput!
                resolve: "@=mutation('removeProductListMutation', args)"
            PayOrder:
                type: PaymentSetupCreationData!
                description: "Pay order(create payment transaction in payment gateway) and get payment setup data for redirect or creating JS payment gateway layer"
                args:
                    orderUuid:
                        type: "Uuid!"
                resolve: "@=mutation('payOrderMutation', args)"
            UpdatePaymentStatus:
                type: "Order!"
                description: "check payment status of order after callback from payment service"
                args:
                    orderUuid:
                        type: "Uuid!"
                    orderPaymentStatusPageValidityHash:
                        type: "String"
                resolve: "@=mutation('updatePaymentStatusMutation', args)"
            ChangePaymentInOrder:
                type: "Order!"
                description: "change payment in an order after the order creation (available for unpaid GoPay orders only)"
                args:
                    input:
                        type: ChangePaymentInOrderInput!
                        validation: cascade
                resolve: "@=mutation('changePaymentInOrderMutation', args)"
            AddToCart:
                type: AddToCartResult!
                description: "Add product to cart for future checkout"
                args:
                    input:
                        type: AddToCartInput!
                        validation: cascade
                resolve: "@=mutation('addToCartMutation', args, validator)"
            RemoveFromCart:
                type: Cart!
                description: "Remove product from cart"
                args:
                    input:
                        type: RemoveFromCartInput!
                        validation: cascade
                resolve: "@=mutation('removeFromCartMutation', args, validator)"
            AddOrderItemsToCart:
                type: Cart!
                description: "Fills cart based on a given order, possibly merging it with the current cart"
                args:
                    input:
                        type: AddOrderItemsToCartInput!
                        validation: cascade
                resolve: "@=mutation('addOrderItemsToCartMutation', args, validator)"
            ChangePaymentInCart:
                type: Cart!
                description: "Add a payment to the cart, or remove a payment from the cart"
                args:
                    input:
                        type: ChangePaymentInCartInput!
                        validation: cascade
                resolve: "@=mutation('changePaymentInCartMutation', args)"
            ChangeTransportInCart:
                type: Cart!
                description: "Add a transport to the cart, or remove a transport from the cart"
                args:
                    input:
                        type: ChangeTransportInCartInput!
                        validation: cascade
                resolve: "@=mutation('changeTransportInCartMutation', args)"
            ApplyPromoCodeToCart:
                type: Cart!
                description: "Apply new promo code for the future checkout"
                args:
                    input:
                        type: ApplyPromoCodeToCartInput!
                        validation: cascade
                resolve: "@=mutation('applyPromoCodeToCartMutation', args, validator)"
            RemovePromoCodeFromCart:
                type: Cart!
                description: "Remove already used promo code from cart"
                args:
                    input:
                        type: RemovePromoCodeFromCartInput!
                        validation: cascade
                resolve: "@=mutation('removePromoCodeFromCartMutation', args, validator)"
            ContactForm:
                type: Boolean!
                description: "Send message to the site owner"
                args:
                    input:
                        type: ContactFormInput!
                        validation: cascade
                resolve: "@=mutation('contactFormMutation', args, validator)"
            AddNewCustomerUser:
                type: "CustomerUser!"
                description: "Add new customer user to customer"
                args:
                    input:
                        type: AddNewCustomerUserDataInput!
                        validation: cascade
                access: "@=isGranted('is_company_owner_voter', args)"
                resolve: "@=mutation('addNewCustomerUserMutation', args, validator)"
            EditCustomerUserPersonalData:
                type: "CustomerUser!"
                description: "edit customer user to customer"
                args:
                    input:
                        type: EditCustomerUserPersonalDataInput!
                        validation: cascade
                resolve: "@=mutation('editCustomerUserPersonalDataMutation', args, validator)"
                access: "@=isGranted('can_manage_customer_user_voter', args)"
            RemoveCustomerUser:
                type: Boolean!
                description: "delete customer user"
                args:
                    input:
                        type: "RemoveCustomerUserDataInput!"
                resolve: "@=mutation('removeCustomerUserMutation', args)"
                access: "@=isGranted('can_manage_customer_user_voter', args)"
            CreateComplaint:
                type: Complaint!
                description: "Create a new complaint"
                args:
                    input:
                        type: ComplaintInput!
                        validation: cascade
                resolve: "@=mutation('createComplaintMutation', args, validator)"
