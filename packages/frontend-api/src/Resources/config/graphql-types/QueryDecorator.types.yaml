QueryDecorator:
    type: object
    decorator: true
    config:
        fields:
            categories:
                type: '[Category!]!'
                resolve: "@=query('categoriesQuery')"
                description: "Returns complete list of categories"
            categoriesSearch:
                type: "CategoryConnection"
                argsBuilder: "Relay::Connection"
                resolve: "@=query('categoriesSearchQuery', args)"
                args:
                    search:
                        type: "String!"
                    requestingPage:
                        type: "String"
                        description: "URL of page where the search was initiated"
                    userIdentifier:
                        type: "String"
                        description: "Unique identifier of the user who initiated the search in format ^[0-9a-zA-Z+\/]{24}$/"
                description: "Returns list of searched categories that can be paginated using `first`, `last`, `before` and `after` keywords"
            products:
                type: "ProductConnection"
                argsBuilder:
                    builder: "ProductPaginatorArgumentsBuilder"
                    config:
                        orderingModeType: 'ProductOrderingModeEnum'
                resolve: "@=query('productsQuery', args)"
                description: "Returns list of ordered products that can be paginated using `first`, `last`, `before` and `after` keywords"
            product:
                type: 'Product'
                resolve: "@=query('productDetailQuery', args['uuid'], args['urlSlug'])"
                args:
                    uuid:
                        type: "Uuid"
                    urlSlug:
                        type: "String"
                description: "Returns product filtered using UUID or URL slug"
            productsSearch:
                type: "ProductConnection!"
                argsBuilder:
                    builder: "ProductSearchPaginatorArgumentsBuilder"
                    config:
                        orderingModeType: 'ProductOrderingModeEnum'
                resolve: "@=query('productsSearchQuery', args)"
                complexity: "@=dynamicPaginationComplexity(args)"
                args:
                    search:
                        type: "String!"
                    requestingPage:
                        type: "String"
                        description: "URL of page where the search was initiated"
                    userIdentifier:
                        type: "String"
                        description: "Unique identifier of the user who initiated the search in format ^[0-9a-zA-Z+\/]{24}$/"
                description: "Returns list of searched products that can be paginated using `first`, `last`, `before` and `after` keywords"
            RegularProduct:
                type: 'RegularProduct'
            MainVariant:
                type: 'MainVariant'
            Variant:
                type: 'Variant'
            category:
                type: 'Category'
                resolve: "@=query('categoryByUuidOrUrlSlugQuery', args['uuid'], args['urlSlug'])"
                args:
                    uuid:
                        type: "Uuid"
                    urlSlug:
                        type: "String"
                description: "Returns category filtered using UUID or URL slug"
            payments:
                type: '[Payment!]!'
                resolve: "@=query('paymentsQuery')"
                description: "Returns complete list of payment methods"
            payment:
                type: 'Payment'
                resolve: "@=query('paymentQuery', args['uuid'])"
                args:
                    uuid:
                        type: "Uuid!"
                description: "Returns payment filtered using UUID"
            transports:
                type: '[Transport!]!'
                resolve: "@=query('transportsQuery')"
                description: "Returns complete list of transport methods"
            transport:
                type: 'Transport'
                resolve: "@=query('transportByTransportUuidQuery', args['uuid'])"
                args:
                    uuid:
                        type: "Uuid!"
                description: "Returns complete list of transport methods"
            currentCustomerUser:
                type: 'CurrentCustomerUser!'
                resolve: "@=query('currentCustomerUserQuery')"
                description: "Returns currently logged in customer user"
            orders:
                type: "OrderConnection"
                argsBuilder: "Relay::Connection"
                resolve: "@=query('ordersQuery', args)"
                description: "Returns list of orders that can be paginated using `first`, `last`, `before` and `after` keywords"
            order:
                type: 'Order'
                resolve: "@=query('orderByUuidOrUrlHashQuery', args['uuid'], args['urlHash'])"
                args:
                    uuid:
                        type: "Uuid"
                    urlHash:
                        type: "String"
                description: "Returns order filtered using UUID or urlHash"
            articles:
                type: "ArticleConnection!"
                argsBuilder: "Relay::Connection"
                resolve: "@=query('articlesQuery', args, args['placement'])"
                complexity: "@=dynamicPaginationComplexity(args)"
                args:
                    placement:
                        type: "[ArticlePlacementTypeEnum!]"
                        defaultValue: []
                        validation:
                            -   NotNull: ~
                        description: "An array of the required articles placements"
                description: "Returns list of articles that can be paginated using `first`, `last`, `before` and `after` keywords and filtered by `placement`"
            articlesSearch:
                type: "[ArticleInterface!]!"
                resolve: "@=query('articlesSearchQuery', args)"
                args:
                    search:
                        type: "String!"
                    requestingPage:
                        type: "String"
                        description: "URL of page where the search was initiated"
                    userIdentifier:
                        type: "String"
                        description: "Unique identifier of the user who initiated the search in format ^[0-9a-zA-Z+\/]{24}$/"
                description: "Returns list of searched articles and blog articles"
            article:
                type: 'NotBlogArticleInterface'
                resolve: "@=query('articleByUuidOrUrlSlugQuery', args['uuid'], args['urlSlug'])"
                args:
                    uuid:
                        type: "Uuid"
                    urlSlug:
                        type: "String"
                description: "Returns article filtered using UUID or URL slug"
            termsAndConditionsArticle:
                type: 'ArticleSite'
                resolve: "@=query('termsAndConditionsArticleQuery')"
                description: "Returns Terms and Conditions article"
            privacyPolicyArticle:
                type: 'ArticleSite'
                resolve: "@=query('privacyPolicyArticleQuery')"
                description: "Returns privacy policy article"
            cookiesArticle:
                type: 'ArticleSite'
                resolve: "@=query('cookiesArticleQuery')"
                description: "Returns information about cookies article"
            ArticleSite:
                type: "ArticleSite"
            ArticleLink:
                type: "ArticleLink"
            brands:
                type: '[Brand!]!'
                resolve: "@=query('brandsQuery')"
                description: "Returns complete list of brands"
            brand:
                type: 'Brand'
                resolve: "@=query('brandByUuidOrUrlSlugQuery', args['uuid'], args['urlSlug'])"
                args:
                    uuid:
                        type: "Uuid"
                    urlSlug:
                        type: "String"
                description: "Returns brand filtered using UUID or URL slug"
            promotedProducts:
                type: '[Product!]!'
                resolve: "@=query('promotedProductsQuery')"
                description: "Returns promoted products"
            adverts:
                type: '[Advert!]!'
                resolve: "@=query('advertsQuery', args['positionName'], args['categoryUuid'])"
                args:
                    positionName:
                        type: "String"
                    categoryUuid:
                        type: "Uuid"
                description: "Returns list of adverts, optionally filtered by `positionName`"
            AdvertCode:
                type: 'AdvertCode'
            AdvertImage:
                type: 'AdvertImage'
            advertPositions:
                type: '[AdvertPosition!]!'
                resolve: "@=query('advertPositionsQuery')"
                description: "Returns list of advert positions."
            settings:
                type: 'Settings'
                resolve: "@=query('settingsQuery')"
                description: "Returns current settings"
            productList:
                type: 'ProductList'
                resolve: "@=query('productListQuery', args)"
                args:
                    input:
                        type: "ProductListInput!"
                description: "Find product list by UUID and type or if customer is logged, try find the the oldest list of the given type for the logged customer. The logged customer can also optionally pass the UUID of his product list."
            productListsByType:
                type: '[ProductList!]!'
                resolve: "@=query('productListsByTypeQuery', args['productListType'])"
                args:
                    productListType:
                        type: "ProductListTypeEnum!"
            blogArticle:
                type: 'BlogArticle'
                resolve: "@=query('blogArticleByUuidOrUrlSlugQuery', args['uuid'], args['urlSlug'])"
                args:
                    uuid:
                        type: "Uuid"
                    urlSlug:
                        type: "String"
                description: "Returns blog article filtered using UUID or URL slug"
            blogArticles:
                type: "BlogArticleConnection!"
                argsBuilder: "BlogArticlePaginatorArgumentsBuilder"
                resolve: "@=query('blogArticlesQuery', args)"
                complexity: "@=dynamicPaginationComplexity(args)"
                description: "Returns a list of the blog articles that can be paginated using `first`, `last`, `before` and `after` keywords"
            blogCategory:
                type: 'BlogCategory'
                resolve: "@=query('blogCategoryByUuidOrUrlSlugQuery', args['uuid'], args['urlSlug'])"
                args:
                    uuid:
                        type: "Uuid"
                    urlSlug:
                        type: "String"
                description: "Returns blog category filtered using UUID or URL slug"
            blogCategories:
                type: '[BlogCategory!]!'
                resolve: "@=query('blogCategoriesQuery')"
                description: "Returns a complete list of the blog categories"
            productsByCatnums:
                type: "[Product!]!"
                resolve: '@=query("productsByCatnumsQuery", args["catnums"])'
                args:
                    catnums:
                        type: "[String!]!"
                        description: "Array of product catalog numbers"
                description: "Returns list of products by catalog numbers"
