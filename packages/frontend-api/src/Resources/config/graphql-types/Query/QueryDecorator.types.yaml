QueryDecorator:
    type: object
    decorator: true
    config:
        fields:
            brandSearch:
                type: "[Brand!]!"
                resolve: "@=query('brandSearchQuery', args)"
                args:
                    searchInput:
                        type: "SearchInput!"
                description: "Returns list of searched brands"
            categories:
                type: '[Category!]!'
                resolve: "@=query('categoriesQuery')"
                description: "Returns complete list of categories"
            categoriesSearch:
                type: "CategoryConnection"
                argsBuilder: "Relay::Connection"
                resolve: "@=query('categoriesSearchQuery', args)"
                args:
                    searchInput:
                        type: "SearchInput!"
                description: "Returns list of searched categories that can be paginated using `first`, `last`, `before` and `after` keywords"
            products:
                type: "ProductConnection!"
                argsBuilder:
                    builder: "ProductPaginatorArgumentsBuilder"
                    config:
                        orderingModeType: 'ProductOrderingModeEnum'
                resolve: "@=query('productsWithOverlyingEntityQuery', args, info)"
                complexity: "@=dynamicPaginationComplexity(args)"
                description: "Returns list of ordered products that can be paginated using `first`, `last`, `before` and `after` keywords"
            product:
                type: 'Product'
                resolve: "@=query('productDetailQuery', args['uuid'], args['urlSlug'])"
                args:
                    uuid:
                        type: "Uuid"
                    urlSlug:
                        type: "String"
                description: "Returns product filtered using UUID or URL slug"
            productsSearch:
                type: "ProductConnection!"
                argsBuilder:
                    builder: "ProductSearchPaginatorArgumentsBuilder"
                    config:
                        orderingModeType: 'ProductOrderingModeEnum'
                resolve: "@=query('productsSearchQuery', args)"
                complexity: "@=dynamicPaginationComplexity(args)"
                args:
                    searchInput:
                        type: "SearchInput!"
                description: "Returns list of searched products that can be paginated using `first`, `last`, `before` and `after` keywords"
            RegularProduct:
                type: 'RegularProduct'
            MainVariant:
                type: 'MainVariant'
            Variant:
                type: 'Variant'
            category:
                type: 'Category'
                resolve: "@=query('categoryByUuidOrUrlSlugQuery', args['uuid'], args['urlSlug'])"
                args:
                    uuid:
                        type: "Uuid"
                    urlSlug:
                        type: "String"
                description: "Returns category filtered using UUID or URL slug"
            payments:
                type: '[Payment!]!'
                resolve: "@=query('paymentsQuery')"
                description: "Returns complete list of payment methods"
            payment:
                type: 'Payment'
                resolve: "@=query('paymentQuery', args['uuid'])"
                args:
                    uuid:
                        type: "Uuid!"
                description: "Returns payment filtered using UUID"
            transports:
                type: '[Transport!]!'
                resolve: "@=query('transportsQuery', args['cartUuid'])"
                args:
                    cartUuid:
                        type: "Uuid"
                description: "Returns available transport methods based on the current cart state"
            transport:
                type: 'Transport'
                resolve: "@=query('transportByTransportUuidQuery', args['uuid'])"
                args:
                    uuid:
                        type: "Uuid!"
                description: "Returns complete list of transport methods"
            currentCustomerUser:
                type: 'CurrentCustomerUser!'
                resolve: "@=query('currentCustomerUserQuery')"
                description: "Returns currently logged in customer user"
            orders:
                type: "OrderConnection"
                argsBuilder: "Relay::Connection"
                resolve: "@=query('ordersQuery', args)"
                args:
                    filter:
                        type: "OrderFilterInput"
                description: "Returns list of orders that can be paginated using `first`, `last`, `before` and `after` keywords"
            orderItems:
                type: "OrderItemConnection!"
                argsBuilder: "Relay::Connection"
                resolve: "@=query('orderItemsQuery', args)"
                complexity: "@=dynamicPaginationComplexity(args)"
                args:
                    filter:
                        type: "OrderItemsFilterInput"
            orderItemsSearch:
                type: "OrderItemConnection!"
                argsBuilder: "Relay::Connection"
                resolve: "@=query('orderItemsSearchQuery', args)"
                complexity: "@=dynamicPaginationComplexity(args)"
                args:
                    searchInput:
                        type: "SearchInput!"
                    filter:
                        type: "OrderItemsFilterInput"
                description: "Returns list of searched order items that can be paginated using `first`, `last`, `before` and `after` keywords"
            order:
                type: 'Order'
                resolve: "@=query('orderByUuidOrUrlHashQuery', args['uuid'], args['urlHash'])"
                args:
                    uuid:
                        type: "Uuid"
                    urlHash:
                        type: "String"
                description: "Returns order filtered using UUID or urlHash"
            articles:
                type: "ArticleConnection!"
                argsBuilder: "Relay::Connection"
                resolve: "@=query('articlesQuery', args, args['placement'])"
                complexity: "@=dynamicPaginationComplexity(args)"
                args:
                    placement:
                        type: "[ArticlePlacementTypeEnum!]"
                        defaultValue: []
                        validation:
                            -   NotNull: ~
                        description: "An array of the required articles placements"
                description: "Returns list of articles that can be paginated using `first`, `last`, `before` and `after` keywords and filtered by `placement`"
            articlesSearch:
                type: "[ArticleInterface!]!"
                resolve: "@=query('articlesSearchQuery', args)"
                args:
                    searchInput:
                        type: "SearchInput!"
                description: "Returns list of searched articles and blog articles"
            article:
                type: 'NotBlogArticleInterface'
                resolve: "@=query('articleByUuidOrUrlSlugQuery', args['uuid'], args['urlSlug'])"
                args:
                    uuid:
                        type: "Uuid"
                    urlSlug:
                        type: "String"
                description: "Returns article filtered using UUID or URL slug"
            ArticleSite:
                type: "ArticleSite"
            ArticleLink:
                type: "ArticleLink"
            brands:
                type: '[Brand!]!'
                resolve: "@=query('brandsQuery')"
                description: "Returns complete list of brands"
            brand:
                type: 'Brand'
                resolve: "@=query('brandByUuidOrUrlSlugQuery', args['uuid'], args['urlSlug'])"
                args:
                    uuid:
                        type: "Uuid"
                    urlSlug:
                        type: "String"
                description: "Returns brand filtered using UUID or URL slug"
            promotedProducts:
                type: '[Product!]!'
                resolve: "@=query('promotedProductsQuery')"
                description: "Returns promoted products"
            adverts:
                type: '[Advert!]!'
                resolve: "@=query('advertsQuery', args['positionNames'], args['categoryUuid'])"
                args:
                    positionNames:
                        type: "[String!]"
                    categoryUuid:
                        type: "Uuid"
                description: "Returns list of adverts, optionally filtered by `positionNames`"
            AdvertCode:
                type: 'AdvertCode'
            AdvertImage:
                type: 'AdvertImage'
            advertPositions:
                type: '[AdvertPosition!]!'
                resolve: "@=query('advertPositionsQuery')"
                description: "Returns list of advert positions."
            settings:
                type: 'Settings'
                resolve: "@=query('settingsQuery')"
                description: "Returns current settings"
            productList:
                type: 'ProductList'
                resolve: "@=query('productListQuery', args)"
                args:
                    input:
                        type: "ProductListInput!"
                description: "Find product list by UUID and type or if customer is logged, try find the the oldest list of the given type for the logged customer. The logged customer can also optionally pass the UUID of his product list."
            productListsByType:
                type: '[ProductList!]!'
                resolve: "@=query('productListsByTypeQuery', args['productListType'])"
                args:
                    productListType:
                        type: "ProductListTypeEnum!"
            blogArticle:
                type: 'BlogArticle'
                resolve: "@=query('blogArticleByUuidOrUrlSlugQuery', args['uuid'], args['urlSlug'])"
                args:
                    uuid:
                        type: "Uuid"
                    urlSlug:
                        type: "String"
                description: "Returns blog article filtered using UUID or URL slug"
            blogArticles:
                type: "BlogArticleConnection!"
                argsBuilder: "BlogArticlePaginatorArgumentsBuilder"
                resolve: "@=query('blogArticlesQuery', args)"
                complexity: "@=dynamicPaginationComplexity(args)"
                description: "Returns a list of the blog articles that can be paginated using `first`, `last`, `before` and `after` keywords"
            blogCategory:
                type: 'BlogCategory'
                resolve: "@=query('blogCategoryByUuidOrUrlSlugQuery', args['uuid'], args['urlSlug'])"
                args:
                    uuid:
                        type: "Uuid"
                    urlSlug:
                        type: "String"
                description: "Returns blog category filtered using UUID or URL slug"
            blogCategories:
                type: '[BlogCategory!]!'
                resolve: "@=query('blogCategoriesQuery')"
                description: "Returns a complete list of the blog categories"
            productsByCatnums:
                type: "[Product!]!"
                resolve: '@=query("productsByCatnumsQuery", args["catnums"])'
                args:
                    catnums:
                        type: "[String!]!"
                        description: "Array of product catalog numbers"
                description: "Returns list of products by catalog numbers"
            orderPayments:
                type: 'OrderPaymentsConfig!'
                resolve: "@=query('orderPaymentsQuery', args['orderUuid'])"
                args:
                    orderUuid:
                        type: "Uuid!"
                description: "Returns payments available for the given order"
            GoPaySwifts:
                type: "[GoPayBankSwift!]!"
                description: "List of available banks for GoPay bank transfer payment"
                resolve: "@=query('goPaySwiftsQuery', args['currencyCode'])"
                args:
                    currencyCode:
                        type: "String!"
            cart:
                type: 'Cart'
                args:
                    cartInput:
                        type: CartInput
                        validation: cascade
                resolve: "@=query('cartQuery', args)"
                description: "Return cart of logged customer or cart by UUID for anonymous user"
            navigation:
                type: '[NavigationItem!]!'
                resolve: "@=query('navigationQuery')"
                description: "Returns complete navigation menu"
            countries:
                type: '[Country!]!'
                resolve: "@=query('countriesQuery')"
                description: "Returns available countries"
            customerUsers:
                type: '[CustomerUser!]!'
                resolve: "@=query('customerUsersQuery')"
                access: "@=isGranted('ROLE_API_ALL')"
                description: "Returns all customer users assigned to the current customer"
            customerUserRoleGroups:
                type: '[CustomerUserRoleGroup!]!'
                resolve: "@=query('customerUserRoleGroupsQuery')"
                access: "@=isGranted('is_company_owner_voter')"
                description: "Returns all customer user role groups"
            complaint:
                type: "Complaint!"
                args:
                    number:
                        type: "String!"
                        description: "Complaint number"
                resolve: "@=query('complaintQuery', args)"
                description: "Returns complaint filtered using UUID"
            complaints:
                type: "ComplaintConnection!"
                argsBuilder: "Relay::Connection"
                args:
                    searchInput:
                        type: "SearchInput"
                resolve: "@=query('complaintsQuery', args)"
                complexity: "@=dynamicPaginationComplexity(args)"
                description: "Returns list of complaints that can be paginated using `first`, `last`, `before` and `after` keywords"
            flags:
                type: '[Flag!]'
                resolve: "@=query('flagsQuery')"
                description: "Returns a complete list of the flags"
            flag:
                type: 'Flag'
                resolve: "@=query('flagByUuidOrUrlSlugQuery', args['uuid'], args['urlSlug'])"
                args:
                    uuid:
                        type: "Uuid"
                    urlSlug:
                        type: "String"
                description: "Returns a flag by uuid or url slug"
