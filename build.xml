<?xml version="1.0" encoding="UTF-8"?>
<project name="Shopsys Platform" default="list">

    <property name="check-and-fix-annotations" value="true"/>
    <property name="npm.framework" value="@shopsys/framework"/>
    <property name="path.root" value="${project.basedir}/project-base/app"/>
    <property name="path.vendor" value="${project.basedir}/vendor"/>
    <property name="path.packages" value="${project.basedir}/packages"/>
    <property name="path.frontend-api" value="${path.packages}/frontend-api"/>
    <property name="path.framework" value="${path.packages}/framework"/>
    <property name="path.utils" value="${project.basedir}/utils"/>
    <property name="path.upgrade-notes" value="${project.basedir}/upgrade-notes"/>
    <property name="translations.dump.flags" value=""/>

    <import file="${path.framework}/build.xml"/>
    <import file="${path.frontend-api}/build.xml"/>
    <import file="${path.root}/build-cron.xml"/>

    <target name="build-demo-ci" depends="composer-dev,shopsys_framework.build-demo-ci" description="Builds application for development with clean demo DB and runs CI checks."/>

    <target name="build-demo-dev" depends="composer-dev,shopsys_framework.build-demo-dev" description="Builds application for development with clean demo DB and runs checks on changed files."/>

    <target name="build-demo-dev-no-api" depends="shopsys_framework.build-demo-dev" description="Builds application for development with clean demo DB without API and runs checks on changed files."/>

    <target name="build-dev" depends="composer-dev,shopsys_framework.build-dev" description="Builds application for development preserving your DB and runs checks on changed files."/>

    <target name="checks-internal" depends="shopsys_framework.checks-internal,project-base-vendor-check" description="Runs all internal checks for monorepo, eg. availability of services or validity of configuration f." hidden="true"/>

    <target name="clean" description="Cleans up directories with cache and scripts which are generated on demand.">
        <phingcall target="shopsys_framework.clean"/>
        <delete failonerror="false" includeemptydirs="true" quiet="true">
            <filelist dir="${path.root}" files="migrations-lock.yml"/>
        </delete>
    </target>

    <target name="composer-dev" description="Runs composer update.">
        <exec executable="${path.composer.executable}" logoutput="true" passthru="true" checkreturn="true">
            <arg value="update"/>
        </exec>
    </target>

    <target name="eslint-check" description="Find JS coding standard violations in all files using ESLint in the whole monorepo and print human readable output." hidden="true">
        <phingcall target="shopsys_framework.eslint-check"/>
        <exec executable="${path.eslint.executable}" passthru="true" checkreturn="true">
            <arg value="--color"/>
            <arg path="${path.framework.assets}"/>
            <arg value="--config"/>
            <arg path="${path.root}/.eslintrc.json"/>
            <arg value="--ignore-path"/>
            <arg path="${path.framework.assets}/.eslintignore"/>
        </exec>
    </target>

    <target name="eslint-check-diff" hidden="true">
        <echo level="info" message="Checking only changed files via 'eslint-check-diff' not supported in monorepo. Running 'eslint-check' instead..."/>
        <phingcall target="eslint-check"/>
    </target>

    <target name="eslint-fix" description="Fix JS coding standard violations in all files using ESLint in the whole monorepo." hidden="true">
        <phingcall target="shopsys_framework.eslint-fix"/>
        <exec executable="${path.eslint.executable}" passthru="true" checkreturn="true">
            <arg value="--color"/>
            <arg value="--fix"/>
            <arg path="${path.framework.assets}"/>
            <arg value="--config"/>
            <arg path="${path.root}/.eslintrc.json"/>
            <arg value="--ignore-path"/>
            <arg path="${path.framework.assets}/.eslintignore"/>
        </exec>
    </target>

    <target name="eslint-fix-diff" hidden="true">
        <echo level="info" message="Fixing only changed files via 'eslint-fix-diff' not supported in monorepo. Running 'eslint-fix' instead..."/>
        <phingcall target="eslint-fix"/>
    </target>

    <target name="frontend-api-generate-apiary-blueprint">
        <echo level="info" message="Generating apiary blueprint"/>
        <exec executable="npx" passthru="true" checkreturn="true">
            <arg value="hercule"/>
            <arg value="${path.frontend-api}/apiary/index.md"/>
            <arg value="-o"/>
            <arg value="${path.frontend-api}/apiary.apib"/>
        </exec>
        <echo message="Apiary blueprint was generated, commit changes when needed"/>
    </target>

    <target name="markdown-check" description="Check format of all markdown files" hidden="true">
        <exec executable="${path.npm.executable}" dir="${path.root}" logoutput="true" passthru="true" checkreturn="true">
            <arg value="run"/>
            <arg value="prettier-check"/>
            <arg path="${path.root}/../*.md"/>
            <arg path="${path.root}/docs/**/*.md"/>
            <arg path="${path.packages}/**/*.md"/>
            <arg path="${project.basedir}/docs/**/*.md"/>
            <arg path="${project.basedir}/*.md"/>
            <arg path="${project.basedir}/upgrade-notes/*.md"/>
        </exec>
    </target>

    <target name="markdown-fix" description="Reformat all markdown files" hidden="true">
        <exec executable="${path.npm.executable}" dir="${path.root}" logoutput="true" passthru="true" checkreturn="true">
            <arg value="run"/>
            <arg value="prettier-fix"/>
            <arg path="${path.root}/../*.md"/>
            <arg path="${path.root}/docs/**/*.md"/>
            <arg path="${path.packages}/**/*.md"/>
            <arg path="${project.basedir}/docs/**/*.md"/>
            <arg path="${project.basedir}/*.md"/>
            <arg path="${project.basedir}/upgrade-notes/*.md"/>
        </exec>
    </target>

    <target name="npm-install-dependencies" description="Installs node modules dependencies." hidden="true">
        <phingcall target="shopsys_framework.npm-install-dependencies"/>

        <exec executable="${path.npm.executable}" dir="${path.framework.assets}" logoutput="true" passthru="true" checkreturn="true">
            <arg value="install"/>
        </exec>

        <exec executable="${path.npm.executable}" dir="${path.framework.assets}" logoutput="true" passthru="true" checkreturn="true">
            <arg value="link"/>
        </exec>

        <exec executable="${path.npm.executable}" dir="${path.root}" logoutput="true" passthru="true" checkreturn="true">
            <arg value="link"/>
            <arg value="${npm.framework}"/>
        </exec>
    </target>

    <target name="npm-translations-dump" description="Dumped translations from javascript's files." hidden="true">
        <exec executable="${path.npm.executable}" dir="${path.root}" logoutput="true" passthru="true" checkreturn="true">
            <arg value="run"/>
            <arg value="trans:dump"/>
            <arg value="--"/>
            <arg value="source-dir=${path.assets}/**/*.js"/>
            <arg value="export-dir=${path.var}/translations/projectBase/"/>
        </exec>

        <exec executable="${path.npm.executable}" dir="${path.root}" logoutput="true" passthru="true" checkreturn="true">
            <arg value="run"/>
            <arg value="trans:dump"/>
            <arg value="--"/>
            <arg value="source-dir=${path.framework}/assets/**/*.js"/>
            <arg value="export-dir=${path.var}/translations/framework/"/>
        </exec>
    </target>

    <target name="phing-config-check" description="Checks the syntax of Phing configuration." hidden="true">
        <exec executable="${path.php.executable}" passthru="true" checkreturn="true">
            <arg value="${path.bin-console}"/>
            <arg value="shopsys:phing-config:fix"/>
            <arg value="--check"/>
            <arg path="${project.basedir}/build.xml"/>
            <arg path="${path.root}/build.xml"/>
            <arg path="${path.framework}/build.xml"/>
        </exec>
    </target>

    <target name="phing-config-fix" description="Fixes the syntax of Phing configuration." hidden="true">
        <exec executable="${path.php.executable}" passthru="true" checkreturn="true">
            <arg value="${path.bin-console}"/>
            <arg value="shopsys:phing-config:fix"/>
            <arg path="${project.basedir}/build.xml"/>
            <arg path="${path.root}/build.xml"/>
            <arg path="${path.framework}/build.xml"/>
        </exec>
    </target>

    <target name="phplint" description="Checks syntax of PHP files in the whole monorepo." hidden="true">
        <exec executable="${path.phplint.executable}" logoutput="true" passthru="true" checkreturn="true">
            <arg path="${path.app}"/>
            <arg path="${path.src}"/>
            <arg path="${path.tests}"/>
            <arg path="${path.packages}/*/src"/>
            <arg path="${path.packages}/*/tests"/>
            <arg path="${path.utils}/*/src"/>
            <arg path="${path.utils}/*/tests"/>
        </exec>
    </target>

    <target name="phplint-diff" hidden="true">
        <echo level="info" message="Checking only changed files via 'phplint-diff' not supported in monorepo. Running 'phplint' instead..."/>
        <phingcall target="phplint"/>
    </target>

    <target name="phpstan" depends="warmup,tests-acceptance-build" description="Performs static analysis of PHP files using PHPStan on all packages." hidden="true">
        <exec executable="${path.phpstan.executable}" logoutput="true" passthru="true" checkreturn="true">
            <arg value="analyze"/>
            <arg value="-c"/>
            <arg path="./phpstan.neon"/>
            <arg path="${path.packages}/*/src"/>
            <arg path="${path.packages}/*/tests"/>
            <arg path="${path.app}"/>
            <arg path="${path.root}/src"/>
            <arg path="${path.root}/tests"/>
            <arg path="${path.utils}/*/src"/>
            <arg path="${path.utils}/*/tests"/>
            <arg value="--level=${phpstan.level}"/>
            <arg value="--memory-limit=${phpstan.memory-limit}"/>
            <arg value="-vvv"/>
        </exec>
    </target>

    <target name="project-base-vendor-check" description="Check there exists no vendor directory in project-base/app as that would break the autoloader" hidden="true">
        <if>
            <available file="${path.root}/vendor" type="dir" property="dir.Exists"/>
            <then>
                <echo level="error" message="Composer dependencies are installed in ${path.root} directory which would break the monorepo autoloader. Remove ${path.root}/vendor before re-running the command."/>
                <fail message="Directory ${path.root}/vendor found."/>
            </then>
        </if>
    </target>

    <target name="standards" depends="shopsys_framework.standards,phing-config-check" description="Checks coding standards."/>

    <target name="standards-diff" depends="shopsys_framework.standards-diff,phing-config-check" description="Checks coding standards in changed files."/>

    <target name="standards-fix" depends="shopsys_framework.standards-fix,phing-config-fix" description="Automatically fixes *some* coding standards violations in all files. Always run 'standards' to be sure there are no further violations."/>

    <target name="standards-fix-diff" depends="shopsys_framework.standards-fix-diff,phing-config-fix" description="Automatically fixes *some* coding standards violations in changed files. Always run 'standards' to be sure there are no further violations."/>

    <target name="tests-unit" description="Runs unit tests in the whole monorepo.">
        <phingcall target="shopsys_framework.tests-unit"/>
        <exec executable="${path.bin}/phpunit" logoutput="true" passthru="true" checkreturn="true">
            <arg value="--colors=always"/>
            <arg value="--configuration"/>
            <arg value="${path.packages}/article-feed-luigis-box/phpunit.xml"/>
            <arg value="${path.packages}/article-feed-luigis-box/tests"/>
        </exec>
        <exec executable="${path.bin}/phpunit" logoutput="true" passthru="true" checkreturn="true">
            <arg value="--colors=always"/>
            <arg value="--configuration"/>
            <arg value="${path.packages}/brand-feed-luigis-box/phpunit.xml"/>
            <arg value="${path.packages}/brand-feed-luigis-box/tests"/>
        </exec>
        <exec executable="${path.bin}/phpunit" logoutput="true" passthru="true" checkreturn="true">
            <arg value="--colors=always"/>
            <arg value="--configuration"/>
            <arg value="${path.packages}/category-feed-luigis-box/phpunit.xml"/>
            <arg value="${path.packages}/category-feed-luigis-box/tests"/>
        </exec>
        <exec executable="${path.bin}/phpunit" logoutput="true" passthru="true" checkreturn="true">
            <arg value="--colors=always"/>
            <arg value="--configuration"/>
            <arg value="${path.packages}/product-feed-google/phpunit.xml"/>
            <arg value="${path.packages}/product-feed-google/tests"/>
        </exec>
        <exec executable="${path.bin}/phpunit" logoutput="true" passthru="true" checkreturn="true">
            <arg value="--colors=always"/>
            <arg value="--configuration"/>
            <arg value="${path.packages}/product-feed-heureka/phpunit.xml"/>
            <arg value="${path.packages}/product-feed-heureka/tests"/>
        </exec>
        <exec executable="${path.bin}/phpunit" logoutput="true" passthru="true" checkreturn="true">
            <arg value="--colors=always"/>
            <arg value="--configuration"/>
            <arg value="${path.packages}/product-feed-heureka-delivery/phpunit.xml"/>
            <arg value="${path.packages}/product-feed-heureka-delivery/tests"/>
        </exec>
        <exec executable="${path.bin}/phpunit" logoutput="true" passthru="true" checkreturn="true">
            <arg value="--colors=always"/>
            <arg value="--configuration"/>
            <arg value="${path.packages}/product-feed-zbozi/phpunit.xml"/>
            <arg value="${path.packages}/product-feed-zbozi/tests"/>
        </exec>
        <exec executable="${path.bin}/phpunit" logoutput="true" passthru="true" checkreturn="true">
            <arg value="--colors=always"/>
            <arg value="--configuration"/>
            <arg value="${path.packages}/product-feed-luigis-box/phpunit.xml"/>
            <arg value="${path.packages}/product-feed-luigis-box/tests"/>
        </exec>
        <exec executable="${path.bin}/phpunit" logoutput="true" passthru="true" checkreturn="true">
            <arg value="--colors=always"/>
            <arg value="--configuration"/>
            <arg value="${path.packages}/http-smoke-testing/phpunit.xml"/>
            <arg value="${path.packages}/http-smoke-testing/tests"/>
        </exec>
        <exec executable="${path.bin}/phpunit" logoutput="true" passthru="true" checkreturn="true">
            <arg value="--colors=always"/>
            <arg value="--configuration"/>
            <arg value="${path.packages}/migrations/phpunit.xml"/>
            <arg value="${path.packages}/migrations/tests"/>
        </exec>
        <exec executable="${path.bin}/phpunit" logoutput="true" passthru="true" checkreturn="true">
            <arg value="--colors=always"/>
            <arg value="--configuration"/>
            <arg value="${path.packages}/framework/phpunit.xml"/>
        </exec>
        <exec executable="${path.bin}/phpunit" logoutput="true" passthru="true" checkreturn="true">
            <arg value="--colors=always"/>
            <arg value="--configuration"/>
            <arg value="${path.packages}/coding-standards/phpunit.xml"/>
        </exec>
        <exec executable="${path.bin}/phpunit" logoutput="true" passthru="true" checkreturn="true">
            <arg value="--colors=always"/>
            <arg value="--configuration"/>
            <arg value="${path.packages}/frontend-api/phpunit.xml"/>
            <arg value="${path.packages}/frontend-api/tests/"/>
        </exec>
        <exec executable="${path.bin}/phpunit" logoutput="true" passthru="true" checkreturn="true">
            <arg value="--colors=always"/>
            <arg value="--configuration"/>
            <arg value="${path.utils}/releaser/phpunit.xml"/>
            <arg value="${path.utils}/releaser/tests/"/>
        </exec>
        <exec executable="${path.bin}/phpunit" logoutput="true" passthru="true" checkreturn="true">
            <arg value="--colors=always"/>
            <arg value="--configuration"/>
            <arg value="${path.packages}/luigis-box/phpunit.xml"/>
            <arg value="${path.packages}/luigis-box/tests/"/>
        </exec>
    </target>

    <target name="tests-unit-jest" description="Runs js's unit tests.">
        <exec executable="${path.npm.executable}" dir="${path.framework}/assets" logoutput="true" passthru="true" checkreturn="true">
            <arg value="run"/>
            <arg value="tests:unit"/>
        </exec>
        <exec executable="${path.npm.executable}" dir="${path.root}" logoutput="true" passthru="true" checkreturn="true">
            <arg value="run"/>
            <arg value="tests:unit"/>
        </exec>
    </target>

    <target name="translations-dump" depends="domains-info-load" description="Extracts translatable messages in the whole monorepo.">
        <phingcall target="shopsys_framework.translations-dump"/>
        <exec executable="${path.php.executable}" passthru="true" checkreturn="true">
            <arg value="${path.bin-console}"/>
            <arg value="jms:translation:extract"/>
            <arg value="--bundle=ShopsysFormTypesBundle"/>
            <arg value="--dir=${path.packages}/form-types-bundle/src"/>
            <arg value="--output-format=po"/>
            <arg value="--output-dir=${path.packages}/form-types-bundle/src/Resources/translations"/>
            <arg line="${domains-info.locales}"/>
        </exec>
        <exec executable="${path.php.executable}" passthru="true" checkreturn="true">
            <arg value="${path.bin-console}"/>
            <arg value="jms:translation:extract"/>
            <arg value="--bundle=ShopsysFrameworkBundle"/>
            <arg value="--dir=${path.framework}/src"/>
            <arg value="--dir=${path.var}/translations/framework"/>
            <arg value="--exclude-dir=admin/plugins"/>
            <arg value="--exclude-dir=Component/Translation"/>
            <arg value="--exclude-dir=Component/Javascript/Compiler"/>
            <arg value="--exclude-name=*AnnotatedRouteControllerLoader.php"/>
            <arg value="--output-format=po"/>
            <arg value="--output-dir=${path.framework}/src/Resources/translations"/>
            <arg line="${domains-info.locales}"/>
        </exec>
        <exec executable="${path.php.executable}" passthru="true" checkreturn="true">
            <arg value="${path.bin-console}"/>
            <arg value="jms:translation:extract"/>
            <arg value="--bundle=ShopsysFrontendApiBundle"/>
            <arg value="--dir=${path.packages}/frontend-api/src"/>
            <arg value="--output-format=po"/>
            <arg value="--output-dir=${path.packages}/frontend-api/src/Resources/translations"/>
            <arg line="${domains-info.locales}"/>
        </exec>
        <exec executable="${path.php.executable}" passthru="true" checkreturn="true">
            <arg value="${path.bin-console}"/>
            <arg value="jms:translation:extract"/>
            <arg value="--bundle=ShopsysBrandFeedLuigisBoxBundle"/>
            <arg value="--dir=${path.packages}/brand-feed-luigis-box/src"/>
            <arg value="--output-format=po"/>
            <arg value="--output-dir=${path.packages}/brand-feed-luigis-box/src/Resources/translations"/>
            <arg line="${domains-info.locales}"/>
        </exec>
        <exec executable="${path.php.executable}" passthru="true" checkreturn="true">
            <arg value="${path.bin-console}"/>
            <arg value="jms:translation:extract"/>
            <arg value="--bundle=ShopsysCategoryFeedLuigisBoxBundle"/>
            <arg value="--dir=${path.packages}/category-feed-luigis-box/src"/>
            <arg value="--output-format=po"/>
            <arg value="--output-dir=${path.packages}/category-feed-luigis-box/src/Resources/translations"/>
            <arg line="${domains-info.locales}"/>
        </exec>
        <exec executable="${path.php.executable}" passthru="true" checkreturn="true">
            <arg value="${path.bin-console}"/>
            <arg value="jms:translation:extract"/>
            <arg value="--bundle=ShopsysProductFeedGoogleBundle"/>
            <arg value="--dir=${path.packages}/product-feed-google/src"/>
            <arg value="--output-format=po"/>
            <arg value="--output-dir=${path.packages}/product-feed-google/src/Resources/translations"/>
            <arg line="${domains-info.locales}"/>
        </exec>
        <exec executable="${path.php.executable}" passthru="true" checkreturn="true">
            <arg value="${path.bin-console}"/>
            <arg value="jms:translation:extract"/>
            <arg value="--bundle=ShopsysProductFeedHeurekaBundle"/>
            <arg value="--dir=${path.packages}/product-feed-heureka/src"/>
            <arg value="--output-format=po"/>
            <arg value="--output-dir=${path.packages}/product-feed-heureka/src/Resources/translations"/>
            <arg line="${domains-info.locales}"/>
        </exec>
        <exec executable="${path.php.executable}" passthru="true" checkreturn="true">
            <arg value="${path.bin-console}"/>
            <arg value="jms:translation:extract"/>
            <arg value="--bundle=ShopsysProductFeedHeurekaDeliveryBundle"/>
            <arg value="--dir=${path.packages}/product-feed-heureka-delivery/src"/>
            <arg value="--output-format=po"/>
            <arg value="--output-dir=${path.packages}/product-feed-heureka-delivery/src/Resources/translations"/>
            <arg line="${domains-info.locales}"/>
        </exec>
        <exec executable="${path.php.executable}" passthru="true" checkreturn="true">
            <arg value="${path.bin-console}"/>
            <arg value="jms:translation:extract"/>
            <arg value="--bundle=ShopsysProductFeedZboziBundle"/>
            <arg value="--dir=${path.packages}/product-feed-zbozi/src"/>
            <arg value="--output-format=po"/>
            <arg value="--output-dir=${path.packages}/product-feed-zbozi/src/Resources/translations"/>
            <arg line="${domains-info.locales}"/>
        </exec>
        <exec executable="${path.php.executable}" passthru="true" checkreturn="true">
            <arg value="${path.bin-console}"/>
            <arg value="jms:translation:extract"/>
            <arg value="--bundle=ShopsysProductFeedLuigisBoxBundle"/>
            <arg value="--dir=${path.packages}/product-feed-luigis-box/src"/>
            <arg value="--output-format=po"/>
            <arg value="--output-dir=${path.packages}/product-feed-luigis-box/src/Resources/translations"/>
            <arg line="${domains-info.locales}"/>
        </exec>
        <exec executable="${path.php.executable}" passthru="true" checkreturn="true">
            <arg value="${path.bin-console}"/>
            <arg value="jms:translation:extract"/>
            <arg value="--bundle=ShopsysArticleFeedLuigisBoxBundle"/>
            <arg value="--dir=${path.packages}/article-feed-luigis-box/src"/>
            <arg value="--output-format=po"/>
            <arg value="--output-dir=${path.packages}/article-feed-luigis-box/src/Resources/translations"/>
            <arg line="${domains-info.locales}"/>
        </exec>
        <exec executable="${path.php.executable}" passthru="true" checkreturn="true">
            <arg value="${path.bin-console}"/>
            <arg value="jms:translation:extract"/>
            <arg value="--bundle=ShopsysLuigisBoxBundle"/>
            <arg value="--dir=${path.packages}/luigis-box/src"/>
            <arg value="--output-format=po"/>
            <arg value="--output-dir=${path.packages}/luigis-box/src/Resources/translations"/>
            <arg line="${domains-info.locales}"/>
        </exec>
    </target>

    <target name="twig-lint" description="Checks syntax of Twig templates in the whole monorepo." hidden="true">
        <phingcall target="shopsys_framework.twig-lint"/>
        <exec executable="${path.php.executable}" passthru="true" checkreturn="true">
            <arg value="${path.bin-console}"/>
            <arg value="lint:twig"/>
            <arg value="${path.packages}"/>
        </exec>
        <exec executable="${path.php.executable}" passthru="true" checkreturn="true">
            <arg value="${path.bin-console}"/>
            <arg value="lint:twig"/>
            <arg value="${path.utils}"/>
        </exec>
    </target>

    <target name="twig-lint-diff" hidden="true">
        <echo level="info" message="Checking only changed files via 'twig-lint-diff' not supported in monorepo. Running 'twig-lint' instead..."/>
        <phingcall target="twig-lint"/>
    </target>

    <target name="upgrade-generate" description="Creates empty file(s) for upgrade notes.">
        <input message="Which one?" propertyName="upgradeType" validArgs="backend,storefront,both"/>

        <exec executable="php" outputProperty="currentDate">
            <arg value="-r"/>
            <arg value="echo date('Ymd_His');"/>
        </exec>

        <if>
            <or>
                <equals arg1="${upgradeType}" arg2="backend"/>
                <equals arg1="${upgradeType}" arg2="both"/>
            </or>
            <then>
                <exec executable="php">
                    <arg value="-r"/>
                    <arg value="copy('${path.upgrade-notes}/_template.md', '${path.upgrade-notes}/backend_${currentDate}.md');"/>
                </exec>
                <exec executable="php" escape="false" passthru="true">
                    <arg value="-r"/>
                    <arg value="echo 'File generated: ${path.upgrade-notes}/backend_${currentDate}.md';"/>
                </exec>
            </then>
        </if>
        <if>
            <or>
                <equals arg1="${upgradeType}" arg2="storefront"/>
                <equals arg1="${upgradeType}" arg2="both"/>
            </or>
            <then>
                <exec executable="php">
                    <arg value="-r"/>
                    <arg value="copy('${path.upgrade-notes}/_template.md', '${path.upgrade-notes}/storefront_${currentDate}.md');"/>
                </exec>
                <exec executable="php" escape="false" passthru="true">
                    <arg value="-r"/>
                    <arg value="echo 'File generated: ${path.upgrade-notes}/storefront_${currentDate}.md';"/>
                </exec>
            </then>
        </if>
    </target>

    <target name="upgrade-merge" description="Merges all upgrade notes into UPGRADE-{X.X}.md according to structure specified in upgrade-notes/_layout.md.">
        <input message="Enter version to merge upgrade notes for:" propertyName="version"/>
        <exec executable="${path.php.executable}" passthru="true" checkreturn="true">
            <arg value="${path.upgrade-notes}/upgrade_notes.php"/>
            <arg value="${version}"/>
        </exec>
    </target>

    <target name="yaml-lint" description="Checks syntax of Yaml files in the whole monorepo." hidden="true">
        <phingcall target="shopsys_framework.yaml-lint"/>
        <exec executable="${path.php.executable}" passthru="true" checkreturn="true">
            <arg value="${path.bin-console}"/>
            <arg value="lint:yaml"/>
            <arg value="${path.packages}"/>
            <arg value="--exclude-regex=~node_modules~"/>
            <arg value="--parse-tags"/>
        </exec>
        <exec executable="${path.php.executable}" passthru="true" checkreturn="true">
            <arg value="${path.bin-console}"/>
            <arg value="lint:yaml"/>
            <arg value="${path.utils}"/>
            <arg value="--parse-tags"/>
        </exec>
    </target>

    <target name="yaml-standards" depends="yaml-lint" description="Checks YAML standards (needs sspooky13/yaml-standards)" hidden="true">
        <available file="${path.yaml-standards.executable}" type="file" property="yaml-standards.executable.exists"/>
        <if>
            <equals arg1="${yaml-standards.executable.exists}" arg2="true"/>
            <then>
                <exec executable="${path.yaml-standards.executable}" logoutput="true" passthru="true" checkreturn="true">
                    <arg value="${yaml-standards.args}"/>
                </exec>
            </then>
            <else>
                <echo level="warning" message="The executable '${path.yaml-standards.executable}' is not available, your YAML files cannot be checked."/>
                <echo level="info" message="You can require the package using Composer, run 'composer require --dev sspooky13/yaml-standards'"/>
            </else>
        </if>
    </target>

</project>
