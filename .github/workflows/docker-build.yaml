on:
    push:
        branches:
            - 'master'
            - '[0-9]+.[0-9]+'
        tags:
            - '**'
    pull_request:
        branches:
            - '**'
concurrency:
    group: ${{ github.ref }}
    cancel-in-progress: true
name: "Docker build"
jobs:
    build-docker-images:
        if: github.event.pull_request.head.repo.full_name == 'shopsys/shopsys'
        name: Build PHP-FPM and Elasticsearch images
        runs-on: ubuntu-20.04
        permissions:
            contents: read
            packages: write
        steps:
            -   name: GIT checkout branch - ${{ github.ref }}
                uses: actions/checkout@v3
                with:
                    ref: ${{ github.ref }}
            -   name: Login to GitHub Container Registry
                uses: docker/login-action@v2
                with:
                    registry: ghcr.io
                    username: ${{ github.actor }}
                    password: ${{ secrets.GITHUB_TOKEN }}
            -   name: Extract branch name to ENV variable BRANCH_NAME
                run: echo "BRANCH_NAME=${GITHUB_HEAD_REF:-${GITHUB_REF#refs/heads/}}" >> $GITHUB_ENV
            -   name: Check if PHP-FPM image exists
                env:
                    DOCKER_USERNAME: ${{ github.repository_owner }}
                    GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
                run: |
                    DOCKER_PHP_FPM_IMAGE_TAG=github-action-`find project-base/docker/php-fpm -type f -exec stat -c "%a %n" {} \; -exec cat {} \; | md5sum | awk '{ print $1 }'`
                    echo "DOCKER_PHP_FPM_IMAGE_TAG=${DOCKER_PHP_FPM_IMAGE_TAG}" >> $GITHUB_ENV
                    echo "DOCKER_USERNAME=${DOCKER_USERNAME}" >> $GITHUB_ENV
                    DOCKER_PHP_FPM_IMAGE_EXISTS=`. .github/check-image-exists.sh && checkImageExists ${DOCKER_USERNAME} php-fpm ${DOCKER_PHP_FPM_IMAGE_TAG} ${GITHUB_TOKEN} > /dev/null ; echo $?`
                    echo "DOCKER_PHP_FPM_IMAGE_EXISTS=${DOCKER_PHP_FPM_IMAGE_EXISTS}" >> $GITHUB_ENV
            -   name: Build PHP-FPM image and push it to Github Container Registry
                if: env.DOCKER_PHP_FPM_IMAGE_EXISTS == 0
                run: .github/build-php-fpm-image.sh
            -   name: Check if Elasticseach image exists
                env:
                    GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
                run: |
                    DOCKER_ELASTICSEARCH_IMAGE_TAG=github-action-`find project-base/docker/elasticsearch -type f -exec stat -c "%a %n" {} \; -exec cat {} \; | md5sum | awk '{ print $1 }'`
                    echo "DOCKER_ELASTICSEARCH_IMAGE_TAG=${DOCKER_ELASTICSEARCH_IMAGE_TAG}" >> $GITHUB_ENV
                    DOCKER_ELASTICSEARCH_IMAGE_EXISTS=`. .github/check-image-exists.sh && checkImageExists ${DOCKER_USERNAME} elasticsearch ${DOCKER_ELASTICSEARCH_IMAGE_TAG} ${GITHUB_TOKEN} > /dev/null ; echo $?`
                    echo "DOCKER_ELASTICSEARCH_IMAGE_EXISTS=${DOCKER_ELASTICSEARCH_IMAGE_EXISTS}" >> $GITHUB_ENV
            -   name: Build Elasticsearch image and push it to Github Container Registry
                if: env.DOCKER_ELASTICSEARCH_IMAGE_EXISTS == 0
                run: .github/build-elasticsearch-image.sh
            -   name: Copy and rename docker-compose.github-actions.yml.dist to docker-compose.yml
                run: cp -f ./docker/conf/docker-compose.github-actions.yml.dist ./docker-compose.yml
            -   name: Update docker-compose.yml file with right PHP-FPM image
                run: "sed -i \"s#php-fpm-image#ghcr.io/${DOCKER_USERNAME}/php-fpm:${DOCKER_PHP_FPM_IMAGE_TAG}-${{ github.sha }}#\" ./docker-compose.yml"
            -   name: Update docker-compose.yml file with right Elastichsearch image
                run: "sed -i \"s#elasticsearch-image#ghcr.io/${DOCKER_USERNAME}/elasticsearch:${DOCKER_ELASTICSEARCH_IMAGE_TAG}#\" ./docker-compose.yml"
            -   name: Copy and rename docker-compose.github-actions.review.yml.dist to docker-compose.review.yml
                run: cp -f ./docker/conf/docker-compose.github-actions.review.yml.dist ./docker-compose.review.yml
            -   name: Update docker-compose.review.yml file with right PHP-FPM image
                run: "sed -i \"s#php-fpm-image#ghcr.io/${DOCKER_USERNAME}/php-fpm:${DOCKER_PHP_FPM_IMAGE_TAG}-${{ github.sha }}#\" ./docker-compose.review.yml"
            -   name: Update docker-compose.review.yml file with right Elastichsearch image
                run: "sed -i \"s#elasticsearch-image#ghcr.io/${DOCKER_USERNAME}/elasticsearch:${DOCKER_ELASTICSEARCH_IMAGE_TAG}#\" ./docker-compose.review.yml"
            -   name: Update docker-compose.review.yml file with right project values
                run: |
                    echo "HOST=${BRANCH_NAME}.${{ vars.REVIEW_STAGE_URL }}" >> $GITHUB_ENV
                    echo "TRAEFIK_HOSTS=\`${HOST}\`, \`en.${HOST}\`" >> $GITHUB_ENV
                    "sed -i \"s#BRANCH_NAME#${BRANCH_NAME}#\" ./docker-compose.review.yml"
                    "sed -i \"s#TRAEFIK_HOSTS#${TRAEFIK_HOSTS}#\" ./docker-compose.review.yml"
            -   name: Create branch specific PHP-FPM image with project files
                run: |
                    docker run -d --name php-fpm ghcr.io/${DOCKER_USERNAME}/php-fpm:${DOCKER_PHP_FPM_IMAGE_TAG}
                    docker cp ./ php-fpm:/var/www/html
                    docker exec php-fpm composer install --optimize-autoloader --no-interaction
                    docker exec php-fpm php phing composer-dev dirs-create test-dirs-create assets npm build-version-generate frontend-api-enable
            -   name: Push branch specific PHP-FPM image to Github Container Registry
                run: |
                    docker commit -m="Include Composer and NPM files" php-fpm ghcr.io/${DOCKER_USERNAME}/php-fpm:${DOCKER_PHP_FPM_IMAGE_TAG}-${{ github.sha }}
                    docker image push ghcr.io/${DOCKER_USERNAME}/php-fpm:${DOCKER_PHP_FPM_IMAGE_TAG}-${{ github.sha }}
            -   name: Upload docker-compose.yml to artifacts
                uses: actions/upload-artifact@v3
                with:
                    name: docker-compose
                    path: ./docker-compose.yml
            -   name: Upload docker-compose.review.yml to artifacts
                uses: actions/upload-artifact@v3
                with:
                    name: docker-compose-review
                    path: ./docker-compose.review.yml
            -   name: Upload set-urls-for-review.sh to artifacts
                uses: actions/upload-artifact@v3
                with:
                    name: set-urls-for-review
                    path: ./.github/set-urls-for-review.sh
    standards:
        name: Check standards
        needs: build-docker-images
        runs-on: ubuntu-20.04
        steps:
            -   name: Download docker-compose.yml from artifacts
                uses: actions/download-artifact@v3
                with:
                    name: docker-compose
            -   name: Build application
                run: docker-compose up -d php-fpm
            -   name: Check standards
                run: docker-compose exec -T php-fpm php phing standards
    tests-unit-functional-smoke:
        name: Run unit, functional and smoke tests
        needs: build-docker-images
        runs-on: ubuntu-20.04
        steps:
            -   name: GIT checkout branch - ${{ github.ref }}
                uses: actions/checkout@v3
                with:
                    ref: ${{ github.ref }}
            -   name: Download docker-compose.yml from artifacts
                uses: actions/download-artifact@v3
                with:
                    name: docker-compose
            -   name: Build application
                run: |
                    docker-compose pull --parallel postgres elasticsearch redis php-fpm
                    docker-compose up -d postgres elasticsearch redis php-fpm
                    docker-compose exec -T php-fpm php phing db-create test-db-create db-demo elasticsearch-index-recreate elasticsearch-export error-pages-generate
            -   name: Run tests
                run: docker-compose exec -T php-fpm php phing tests
            -   name: PHP-FPM container logs
                if: ${{ failure() }}
                run: docker-compose logs php-fpm
    tests-acceptance:
        name: Run acceptance tests
        needs: build-docker-images
        runs-on: ubuntu-20.04
        steps:
            -   name: GIT checkout branch - ${{ github.ref }}
                uses: actions/checkout@v3
                with:
                    ref: ${{ github.ref }}
            -   name: Download docker-compose.yml from artifacts
                uses: actions/download-artifact@v3
                with:
                    name: docker-compose
            -   name: Build application
                run: |
                    docker-compose pull --parallel webserver postgres elasticsearch redis php-fpm selenium-server
                    docker-compose up -d
                    docker-compose exec -T php-fpm php phing dirs-create db-create test-db-create db-demo error-pages-generate test-db-demo test-elasticsearch-index-recreate test-elasticsearch-export tests-acceptance-build
            -   name: Run acceptance tests
                run: docker-compose exec -T php-fpm php phing tests-acceptance
            -   name: PHP-FPM container logs
                if: ${{ failure() }}
                run: docker-compose logs php-fpm
            -   name: Copy Codeception logs from container
                if: ${{ failure() }}
                run: docker cp shopsys-framework-php-fpm:/var/www/html/project-base/var/log ./project-base/var/log
            -   name: Upload Codeception logs to artifacts
                if: ${{ failure() }}
                uses: actions/upload-artifact@v3
                with:
                    name: acceptance-logs
                    path: ./project-base/var/log/
    build-fork-docker-images:
        if: github.event.pull_request.head.repo.full_name != 'shopsys/shopsys'
        name: Build application and run standards checks and tests
        runs-on: ubuntu-20.04
        steps:
            -   name: GIT checkout branch - ${{ github.ref }}
                uses: actions/checkout@v3
                with:
                    ref: ${{ github.ref }}
            -   name: Check if PHP-FPM image exists
                env:
                    DOCKER_USERNAME: ${{ github.repository_owner }}
                    GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
                run: |
                    DOCKER_PHP_FPM_IMAGE_TAG=github-action-`find project-base/docker/php-fpm -type f -exec stat -c "%a %n" {} \; -exec cat {} \; | md5sum | awk '{ print $1 }'`
                    echo "DOCKER_PHP_FPM_IMAGE_TAG=${DOCKER_PHP_FPM_IMAGE_TAG}" >> $GITHUB_ENV
                    echo "DOCKER_USERNAME=${DOCKER_USERNAME}" >> $GITHUB_ENV
                    DOCKER_PHP_FPM_IMAGE_EXISTS=`. .github/check-image-exists.sh && checkImageExists ${DOCKER_USERNAME} php-fpm ${DOCKER_PHP_FPM_IMAGE_TAG} ${GITHUB_TOKEN} > /dev/null ; echo $?`
                    echo ${DOCKER_PHP_FPM_IMAGE_EXISTS}
                    echo "DOCKER_PHP_FPM_IMAGE_EXISTS=${DOCKER_PHP_FPM_IMAGE_EXISTS}" >> $GITHUB_ENV
            -   name: Build PHP-FPM image
                if: env.DOCKER_PHP_FPM_IMAGE_EXISTS == 0
                run: |
                    docker image build \
                        --build-arg project_root=project-base \
                        --build-arg www_data_uid=$(id -u) \
                        --build-arg www_data_gid=$(id -g) \
                        --tag ghcr.io/${DOCKER_USERNAME}/php-fpm:${DOCKER_PHP_FPM_IMAGE_TAG} \
                        --target development \
                        --no-cache \
                        --compress \
                        -f project-base/docker/php-fpm/Dockerfile \
                        .
            -   name: Check if Elasticseach image exists
                run: |
                    DOCKER_ELASTICSEARCH_IMAGE_TAG=github-action-`find project-base/docker/elasticsearch -type f -exec stat -c "%a %n" {} \; -exec cat {} \; | md5sum | awk '{ print $1 }'`
                    echo "DOCKER_ELASTICSEARCH_IMAGE_TAG=${DOCKER_ELASTICSEARCH_IMAGE_TAG}" >> $GITHUB_ENV
                    DOCKER_ELASTICSEARCH_IMAGE_EXISTS=`. .github/check-image-exists.sh && checkImageExists ${DOCKER_USERNAME} elasticsearch ${DOCKER_ELASTICSEARCH_IMAGE_TAG} ${GITHUB_TOKEN} > /dev/null ; echo $?`
                    echo "DOCKER_ELASTICSEARCH_IMAGE_EXISTS=${DOCKER_ELASTICSEARCH_IMAGE_EXISTS}" >> $GITHUB_ENV
            -   name: Build Elasticsearch image
                if: env.DOCKER_ELASTICSEARCH_IMAGE_EXISTS == 0
                run: |
                    docker image build \
                        --tag ghcr.io/${DOCKER_USERNAME}/elasticsearch:${DOCKER_ELASTICSEARCH_IMAGE_TAG} \
                        --no-cache \
                        --compress \
                        -f project-base/docker/elasticsearch/Dockerfile \
                        .
            -   name: Copy and rename docker-compose.github-actions.yml.dist to docker-compose.yml
                run: cp -f ./docker/conf/docker-compose.github-actions.yml.dist ./docker-compose.yml
            -   name: Update docker-compose.yml file with right PHP-FPM image
                run: "sed -i \"s#php-fpm-image#ghcr.io/${DOCKER_USERNAME}/php-fpm:${DOCKER_PHP_FPM_IMAGE_TAG}#\" ./docker-compose.yml"
            -   name: Update docker-compose.yml file with right Elastichsearch image
                run: "sed -i \"s#elasticsearch-image#ghcr.io/${DOCKER_USERNAME}/elasticsearch:${DOCKER_ELASTICSEARCH_IMAGE_TAG}#\" ./docker-compose.yml"
            -   name: Build application
                run: |
                    docker-compose pull --parallel webserver postgres redis selenium-server
                    docker-compose up -d
                    docker cp ./ shopsys-framework-php-fpm:/var/www/html
                    docker-compose exec -T php-fpm composer install --optimize-autoloader --no-interaction
                    docker-compose exec -T php-fpm php phing composer-dev dirs-create test-dirs-create assets npm build-version-generate frontend-api-enable db-create test-db-create db-demo elasticsearch-index-recreate elasticsearch-export error-pages-generate test-db-demo test-elasticsearch-index-recreate test-elasticsearch-export tests-acceptance-build
            -   name: Check standards
                run: docker-compose exec -T php-fpm php phing standards
            -   name: Run tests
                run: docker-compose exec -T php-fpm php phing tests
            -   name: Run acceptance tests
                run: docker-compose exec -T php-fpm php phing tests-acceptance
            -   name: PHP-FPM container logs
                if: ${{ failure() }}
                run: docker-compose logs php-fpm
            -   name: Copy Codeception logs from container
                if: ${{ failure() }}
                run: docker cp shopsys-framework-php-fpm:/var/www/html/project-base/var/log ./project-base/var/log
            -   name: Upload Codeception logs to artifacts
                if: ${{ failure() }}
                uses: actions/upload-artifact@v3
                with:
                    name: acceptance-logs
                    path: ./project-base/var/log/
    build-successful:
        if: ${{ always() }}
        name: Build successful
        needs: [tests-acceptance, standards, tests-unit-functional-smoke, build-fork-docker-images]
        runs-on: ubuntu-20.04
        env:
            BUILD_FORK_RESULT: ${{ needs.build-fork-docker-images.result }}
            STANDARDS_RESULT: ${{ needs.standards.result }}
            TESTS_RESULT: ${{ needs.tests-unit-functional-smoke.result }}
            TESTS_ACCEPTANCE_RESULT: ${{ needs.tests-acceptance.result }}
        steps:
            -   name: GIT checkout branch - ${{ github.ref }}
                uses: actions/checkout@v3
                with:
                    ref: ${{ github.ref }}
            -   name: Build successful
                run: |
                    EXIT_CODE=`. .github/get-build-exit-code.sh && getBuildExitCodeBasedOnJobResults ${BUILD_FORK_RESULT} ${STANDARDS_RESULT} ${TESTS_RESULT} ${TESTS_ACCEPTANCE_RESULT} > /dev/null ; echo $?`
                    exit "${EXIT_CODE}"
    review:
        if: github.event.pull_request.head.repo.full_name == 'shopsys/shopsys'
        name: Review
        needs: build-docker-images
        runs-on: [self-hosted, linux, review-stage]
        steps:
            -   name: Extract branch name to ENV variable BRANCH_NAME
                run: echo "BRANCH_NAME=${GITHUB_HEAD_REF:-${GITHUB_REF#refs/heads/}}" >> $GITHUB_ENV
            -   name: Create branch directory
                run: |
                    rm -rf ${BRANCH_NAME}
                    mkdir ${BRANCH_NAME}
            -   name: Set ENV variables required for review
                run: |
                    HOST=${BRANCH_NAME}.${{ vars.REVIEW_STAGE_URL }}
                    echo "HOSTS=${HOST}, en.${HOST}" >> $GITHUB_ENV
            -   name: Download docker-compose.review.yml from artifacts
                uses: actions/download-artifact@v3
                with:
                    name: docker-compose-review
            -   name: Download set-urls-for-review-sh from artifacts
                uses: actions/download-artifact@v3
                with:
                    name: set-urls-for-review
            -   name: Move artifacts to branch folder
                run: |
                    mv docker-compose.review.yml ${BRANCH_NAME}/docker-compose.yml
                    mv set-urls-for-review.sh ${BRANCH_NAME}/set-urls-for-review.sh
            -   name: Start project
                run: |
                    cd ${BRANCH_NAME}
                    docker compose pull --parallel webserver postgres redis php-fpm elasticsearch smtp-server
                    chmod +x ./set-urls-for-review.sh
                    docker compose down -v --remove-orphans
                    docker compose up -d --force-recreate
                    ./set-urls-for-review.sh setUrlsToDomainsUrls
                    docker compose exec -T php-fpm php phing -D production.confirm.action=y db-create demo-data error-pages-generate warmup
                    ./set-urls-for-review.sh printDomains
