on:
    push:
        branches:
            - 'master'
            - '[0-9]+.[0-9]+'
        tags:
            - '**'
    pull_request:
        branches:
            - '**'
concurrency:
    group: ${{ github.ref }}
    cancel-in-progress: true
name: Docker build
jobs:
    variables:
        name: Prepare variables and artifacts
        runs-on: ubuntu-22.04
        outputs:
            DOCKER_PHP_FPM_REPOSITORY_TAG: ${{ steps.variables.outputs.DOCKER_PHP_FPM_REPOSITORY_TAG }}
            DOCKER_PHP_FPM_IMAGE_EXISTS: ${{ steps.variables.outputs.DOCKER_PHP_FPM_IMAGE_EXISTS }}
            DOCKER_STOREFRONT_REPOSITORY_TAG: ${{ steps.variables.outputs.DOCKER_STOREFRONT_REPOSITORY_TAG }}
            DOCKER_STOREFRONT_CI_REPOSITORY_TAG: ${{ steps.variables.outputs.DOCKER_STOREFRONT_CI_REPOSITORY_TAG }}
            DOCKER_STOREFRONT_CI_IMAGE_EXISTS: ${{ steps.variables.outputs.DOCKER_STOREFRONT_CI_IMAGE_EXISTS }}
            DOCKER_ELASTICSEARCH_REPOSITORY_TAG: ${{ steps.variables.outputs.DOCKER_ELASTICSEARCH_REPOSITORY_TAG }}
            DOCKER_ELASTICSEARCH_IMAGE_EXISTS: ${{ steps.variables.outputs.DOCKER_ELASTICSEARCH_IMAGE_EXISTS }}
            BRANCH_NAME: ${{ steps.variables.outputs.BRANCH_NAME }}
            BRANCH_NAME_ESCAPED: ${{ steps.variables.outputs.BRANCH_NAME_ESCAPED }}
        steps:
            -   name: GIT checkout branch - ${{ github.ref }}
                uses: actions/checkout@v3
                with:
                    ref: ${{ github.ref }}
            -   name: Extract variables to output
                id: variables
                env:
                    DOCKER_USERNAME: ${{ github.repository_owner }}
                    GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
                run: |
                    DOCKER_PHP_FPM_IMAGE_TAG=github-action-`find project-base/app/docker/php-fpm -type f -exec stat -c "%a %n" {} \; -exec cat {} \; | md5sum | awk '{ print $1 }'`
                    DOCKER_PHP_FPM_REPOSITORY_TAG=ghcr.io/${DOCKER_USERNAME}/php-fpm:${DOCKER_PHP_FPM_IMAGE_TAG}
                    DOCKER_PHP_FPM_IMAGE_EXISTS=`. .github/check-image-exists.sh && checkImageExists ${DOCKER_USERNAME} php-fpm ${DOCKER_PHP_FPM_IMAGE_TAG} ${GITHUB_TOKEN} > /dev/null ; echo $?`
                    DOCKER_STOREFRONT_IMAGE_TAG=github-action-`find project-base/storefront/docker -type f -exec stat -c "%a %n" {} \; -exec cat {} \; | md5sum | awk '{ print $1 }'`-${{ github.sha }}
                    DOCKER_STOREFRONT_REPOSITORY_TAG=ghcr.io/${DOCKER_USERNAME}/storefront:${DOCKER_STOREFRONT_IMAGE_TAG}
                    DOCKER_STOREFRONT_CI_IMAGE_TAG=github-action-`find project-base/storefront/docker -type f -exec stat -c "%a %n" {} \; -exec cat {} \; | md5sum | awk '{ print $1 }'`-ci
                    DOCKER_STOREFRONT_CI_REPOSITORY_TAG=ghcr.io/${DOCKER_USERNAME}/storefront:${DOCKER_STOREFRONT_CI_IMAGE_TAG}
                    DOCKER_STOREFRONT_CI_IMAGE_EXISTS=`. .github/check-image-exists.sh && checkImageExists ${DOCKER_USERNAME} storefront ${DOCKER_STOREFRONT_CI_IMAGE_TAG} ${GITHUB_TOKEN} > /dev/null ; echo $?`
                    DOCKER_ELASTICSEARCH_IMAGE_TAG=github-action-`find project-base/app/docker/elasticsearch -type f -exec stat -c "%a %n" {} \; -exec cat {} \; | md5sum | awk '{ print $1 }'`
                    DOCKER_ELASTICSEARCH_REPOSITORY_TAG=ghcr.io/${DOCKER_USERNAME}/elasticsearch:${DOCKER_ELASTICSEARCH_IMAGE_TAG}
                    DOCKER_ELASTICSEARCH_IMAGE_EXISTS=`. .github/check-image-exists.sh && checkImageExists ${DOCKER_USERNAME} elasticsearch ${DOCKER_ELASTICSEARCH_IMAGE_TAG} ${GITHUB_TOKEN} > /dev/null ; echo $?`
                    BRANCH_NAME=${GITHUB_HEAD_REF:-${GITHUB_REF#refs/heads/}}
                    BRANCH_NAME_ESCAPED="${BRANCH_NAME//./-}"
                    echo "BRANCH_NAME=${BRANCH_NAME}" >> $GITHUB_OUTPUT
                    echo "BRANCH_NAME_ESCAPED=${BRANCH_NAME_ESCAPED}" >> $GITHUB_OUTPUT
                    echo "DOCKER_PHP_FPM_REPOSITORY_TAG=${DOCKER_PHP_FPM_REPOSITORY_TAG}" >> $GITHUB_OUTPUT
                    echo "DOCKER_PHP_FPM_IMAGE_EXISTS=${DOCKER_PHP_FPM_IMAGE_EXISTS}" >> $GITHUB_OUTPUT
                    echo "DOCKER_STOREFRONT_REPOSITORY_TAG=${DOCKER_STOREFRONT_REPOSITORY_TAG}" >> $GITHUB_OUTPUT
                    echo "DOCKER_STOREFRONT_CI_REPOSITORY_TAG=${DOCKER_STOREFRONT_CI_REPOSITORY_TAG}" >> $GITHUB_OUTPUT
                    echo "DOCKER_STOREFRONT_CI_IMAGE_EXISTS=${DOCKER_STOREFRONT_CI_IMAGE_EXISTS}" >> $GITHUB_OUTPUT
                    echo "DOCKER_ELASTICSEARCH_REPOSITORY_TAG=${DOCKER_ELASTICSEARCH_REPOSITORY_TAG}" >> $GITHUB_OUTPUT
                    echo "DOCKER_ELASTICSEARCH_IMAGE_EXISTS=${DOCKER_ELASTICSEARCH_IMAGE_EXISTS}" >> $GITHUB_OUTPUT
            -   name: Copy and rename docker-compose.github-actions.yml.dist to docker-compose.yml
                run: cp -f ./docker/conf/docker-compose.github-actions.yml.dist ./docker-compose.yml
            -   name: Update docker-compose.yml file with right PHP-FPM image
                run: "sed -i \"s#php-fpm-image#${{ steps.variables.outputs.DOCKER_PHP_FPM_REPOSITORY_TAG }}-${{ github.sha }}#\" ./docker-compose.yml"
            -   name: Update docker-compose.yml file with right Elasticsearch image
                run: "sed -i \"s#storefront-image#${{ steps.variables.outputs.DOCKER_STOREFRONT_CI_REPOSITORY_TAG }}#\" ./docker-compose.yml"
            -   name: Update docker-compose.yml file with right Elasticsearch image
                run: "sed -i \"s#elasticsearch-image#${{ steps.variables.outputs.DOCKER_ELASTICSEARCH_REPOSITORY_TAG }}#\" ./docker-compose.yml"
            -   name: Copy and rename docker-compose.github-actions.review.yml.dist to docker-compose.review.yml
                run: cp -f ./docker/conf/docker-compose.github-actions.review.yml.dist ./docker-compose.review.yml
            -   name: Update docker-compose.review.yml file with right PHP-FPM image
                run: "sed -i \"s#php-fpm-image#${{ steps.variables.outputs.DOCKER_PHP_FPM_REPOSITORY_TAG }}-${{ github.sha }}#\" ./docker-compose.review.yml"
            -   name: Update docker-compose.review.yml file with right Storefront image
                run: "sed -i \"s#storefront-image#${{ steps.variables.outputs.DOCKER_STOREFRONT_REPOSITORY_TAG }}#\" ./docker-compose.review.yml"
            -   name: Update docker-compose.review.yml file with right Elasticsearch image
                run: "sed -i \"s#elasticsearch-image#${{ steps.variables.outputs.DOCKER_ELASTICSEARCH_REPOSITORY_TAG }}#\" ./docker-compose.review.yml"
            -   name: Set TRAEFIK_HOSTS ENV variables
                run: |
                    HOST=${{ steps.variables.outputs.BRANCH_NAME_ESCAPED }}.${{ vars.REVIEW_STAGE_URL }}
                    echo "TRAEFIK_HOSTS=\`$HOST\`, \`cz.$HOST\`" >> $GITHUB_ENV
            -   name: Update docker-compose.review.yml file with BRANCH_NAME_ESCAPED ENV variable
                run: "sed -i \"s#BRANCH_NAME#${{ steps.variables.outputs.BRANCH_NAME_ESCAPED }}#\" ./docker-compose.review.yml"
            -   name: Update docker-compose.review.yml file with TRAEFIK_HOSTS ENV variable
                run: "sed -i \"s#TRAEFIK_HOSTS#${TRAEFIK_HOSTS}#\" ./docker-compose.review.yml"
            -   name: Copy and rename docker-compose.github-actions.cypress.yml.dist to docker-compose.cypress.yml
                run: cp -f ./docker/conf/docker-compose.github-actions.cypress.yml.dist ./docker-compose.cypress.yml
            -   name: Update docker-compose.cypress.yml file with right PHP-FPM image
                run: "sed -i \"s#php-fpm-image#${{ steps.variables.outputs.DOCKER_PHP_FPM_REPOSITORY_TAG }}-${{ github.sha }}#\" ./docker-compose.cypress.yml"
            -   name: Update docker-compose.cypress.yml file with right Storefront image
                run: "sed -i \"s#storefront-image#${{ steps.variables.outputs.DOCKER_STOREFRONT_REPOSITORY_TAG }}#\" ./docker-compose.cypress.yml"
            -   name: Update docker-compose.cypress.yml file with right Elasticsearch image
                run: "sed -i \"s#elasticsearch-image#${{ steps.variables.outputs.DOCKER_ELASTICSEARCH_REPOSITORY_TAG }}#\" ./docker-compose.cypress.yml"
            -   name: Upload docker-compose.yml to artifacts
                uses: actions/upload-artifact@v3
                with:
                    name: docker-compose
                    path: ./docker-compose.yml
            -   name: Upload docker-compose.review.yml to artifacts
                uses: actions/upload-artifact@v3
                with:
                    name: docker-compose-review
                    path: ./docker-compose.review.yml
            -   name: Upload docker-compose.cypress.yml to artifacts
                uses: actions/upload-artifact@v3
                with:
                    name: docker-compose-cypress
                    path: ./docker-compose.cypress.yml
            -   name: Upload set-urls-for-review.sh to artifacts
                uses: actions/upload-artifact@v3
                with:
                    name: set-urls-for-review
                    path: ./.github/set-urls-for-review.sh
    build-php-fpm-image:
        if: github.event.pull_request.head.repo.full_name == 'shopsys/shopsys'
        name: Build PHP-FPM image
        runs-on: ubuntu-22.04
        needs: variables
        permissions:
            contents: read
            packages: write
        steps:
            -   name: GIT checkout branch - ${{ github.ref }}
                uses: actions/checkout@v3
                with:
                    ref: ${{ github.ref }}
            -   name: Login to GitHub Container Registry
                uses: docker/login-action@v2
                with:
                    registry: ghcr.io
                    username: ${{ github.actor }}
                    password: ${{ secrets.GITHUB_TOKEN }}
            -   name: Build PHP-FPM image and push it to GitHub Container Registry
                if: needs.variables.outputs.DOCKER_PHP_FPM_IMAGE_EXISTS == 0
                run: |
                    .github/build-php-fpm-image.sh ${{ needs.variables.outputs.DOCKER_PHP_FPM_REPOSITORY_TAG }}
                    docker image push ${{ needs.variables.outputs.DOCKER_PHP_FPM_REPOSITORY_TAG }}
            -   name: Create branch specific PHP-FPM image with project files
                run: |
                    docker run -d --name php-fpm ${{ needs.variables.outputs.DOCKER_PHP_FPM_REPOSITORY_TAG }}
                    docker cp ./ php-fpm:/var/www/html
                    docker exec --user root php-fpm chown -R www-data:www-data /var/www/html
                    docker exec php-fpm rm -rf /var/www/html/composer.lock /var/www/html/project-base/package-lock.json /var/www/html/project-base/migrations-lock.yml
                    docker exec php-fpm php phing -D production.confirm.action=y build-version-generate frontend-api-enable
            -   name: Push branch specific PHP-FPM image to GitHub Container Registry
                run: |
                    docker commit -m="Include Composer and NPM files" php-fpm ${{ needs.variables.outputs.DOCKER_PHP_FPM_REPOSITORY_TAG }}-${{ github.sha }}
                    docker image push ${{ needs.variables.outputs.DOCKER_PHP_FPM_REPOSITORY_TAG }}-${{ github.sha }}
    build-storefront-image:
        if: github.event.pull_request.head.repo.full_name == 'shopsys/shopsys'
        name: Build storefront image
        runs-on: ubuntu-22.04
        needs: variables
        permissions:
            contents: read
            packages: write
        steps:
            -   name: GIT checkout branch - ${{ github.ref }}
                uses: actions/checkout@v3
                with:
                    ref: ${{ github.ref }}
            -   name: Login to GitHub Container Registry
                uses: docker/login-action@v2
                with:
                    registry: ghcr.io
                    username: ${{ github.actor }}
                    password: ${{ secrets.GITHUB_TOKEN }}
            -   name: Build Storefront image and push it to GitHub Container Registry
                run: |
                    .github/build-storefront-image.sh ${{ needs.variables.outputs.DOCKER_STOREFRONT_REPOSITORY_TAG }}
                    docker image push ${{ needs.variables.outputs.DOCKER_STOREFRONT_REPOSITORY_TAG }}
    build-storefront-ci-image:
        if: |
            github.event.pull_request.head.repo.full_name == 'shopsys/shopsys' && 
            needs.variables.outputs.DOCKER_STOREFRONT_CI_IMAGE_EXISTS == 0
        name: Build storefront CI image
        runs-on: ubuntu-22.04
        needs: variables
        permissions:
            contents: read
            packages: write
        steps:
            -   name: GIT checkout branch - ${{ github.ref }}
                uses: actions/checkout@v3
                with:
                    ref: ${{ github.ref }}
            -   name: Login to GitHub Container Registry
                uses: docker/login-action@v2
                with:
                    registry: ghcr.io
                    username: ${{ github.actor }}
                    password: ${{ secrets.GITHUB_TOKEN }}
            -   name: Build Storefront CI image and push it to GitHub Container Registry
                run: |
                    .github/build-storefront-ci-image.sh ${{ needs.variables.outputs.DOCKER_STOREFRONT_CI_REPOSITORY_TAG }}
                    docker image push ${{ needs.variables.outputs.DOCKER_STOREFRONT_CI_REPOSITORY_TAG }}
    build-elasticsearch-image:
        if: |
            github.event.pull_request.head.repo.full_name == 'shopsys/shopsys' && 
            needs.variables.outputs.DOCKER_ELASTICSEARCH_IMAGE_EXISTS == 0
        name: Build Elasticsearch image
        runs-on: ubuntu-22.04
        needs: variables
        permissions:
            contents: read
            packages: write
        steps:
            -   name: GIT checkout branch - ${{ github.ref }}
                uses: actions/checkout@v3
                with:
                    ref: ${{ github.ref }}
            -   name: Login to GitHub Container Registry
                uses: docker/login-action@v2
                with:
                    registry: ghcr.io
                    username: ${{ github.actor }}
                    password: ${{ secrets.GITHUB_TOKEN }}
            -   name: Build Elasticsearch image and push it to GitHub Container Registry
                run: |
                    .github/build-elasticsearch-image.sh ${{ needs.variables.outputs.DOCKER_ELASTICSEARCH_REPOSITORY_TAG }}
                    docker image push ${{ needs.variables.outputs.DOCKER_ELASTICSEARCH_REPOSITORY_TAG }}
    standards:
        name: Check standards
        needs: build-php-fpm-image
        if: |
            always() && !failure() && !cancelled() &&
            github.event.pull_request.head.repo.full_name == 'shopsys/shopsys' &&
            (needs.build-php-fpm-image.result == 'success' || needs.build-php-fpm-image.result == 'skipped')
        runs-on: ubuntu-22.04
        steps:
            -   name: Download docker-compose.yml from artifacts
                uses: actions/download-artifact@v3
                with:
                    name: docker-compose
            -   name: Build application
                run: docker-compose up -d php-fpm
            -   name: Check standards
                run: |
                    docker-compose exec -T php-fpm mv ./project-base/app/PRODUCTION ./project-base/app/DEVELOPMENT
                    docker-compose exec -T php-fpm php phing -D production.confirm.action=y composer-dev standards
            -   name: Check GraphQl schema
                run: docker-compose exec -T php-fpm project-base/app/check-schema.sh
    standards-storefront:
        name: Check Storefront standards
        needs: [build-php-fpm-image, build-storefront-ci-image]
        if: |
            always() && !failure() && !cancelled() &&
            github.event.pull_request.head.repo.full_name == 'shopsys/shopsys' &&
            (needs.build-php-fpm-image.result == 'success' || needs.build-php-fpm-image.result == 'skipped') &&
            (needs.build-storefront-ci-image.result == 'success' || needs.build-storefront-ci-image.result == 'skipped')
        runs-on: ubuntu-22.04
        steps:
            -   name: GIT checkout branch - ${{ github.ref }}
                uses: actions/checkout@v3
                with:
                    ref: ${{ github.ref }}
            -   name: Download docker-compose.yml from artifacts
                uses: actions/download-artifact@v3
                with:
                    name: docker-compose
            -   name: Build application
                run: docker compose up -d storefront php-fpm
            -   name: Move schema.graphql to Storefront container
                run: docker compose cp ./project-base/app/schema.graphql storefront:/home/node/app/schema.graphql
            -   name: Install dev dependencies
                run: |
                    docker compose exec --user root storefront chown -R node:node /home/node/app
                    docker compose exec storefront pnpm install --frozen-lockfile --force --child-concurrency 2
            -   name: Check no NEXT_PUBLIC_ variables are used
                run: |
                    docker compose exec --user root storefront apk add grep
                    docker compose exec storefront sh check-next-public-variable.sh
            -   name: Check graphql schema files are up to date
                run: |
                    docker compose exec php-fpm php phing frontend-api-generate-graphql-schema
                    docker compose cp php-fpm:/var/www/html/project-base/app/schema.graphql /tmp/schema.graphql
                    docker compose cp /tmp/schema.graphql storefront:/home/node/app/schema.graphql
                    docker compose exec -u root storefront chown -R node:node /home/node/app
                    docker compose exec storefront sh check-code-gen.sh
            -   name: Check standards
                run: docker compose exec storefront pnpm run check
            -   name: Storefront container logs
                if: ${{ failure() }}
                run: docker compose logs storefront
            -   name: PHP-FPM container logs
                if: ${{ failure() }}
                run: docker compose logs php-fpm
            -   name: Nginx container logs
                if: ${{ failure() }}
                run: docker compose logs webserver
    tests-unit-functional-smoke:
        name: Run unit, functional and smoke tests
        needs: [build-php-fpm-image, build-elasticsearch-image]
        if: |
            always() && !failure() && !cancelled() &&
            github.event.pull_request.head.repo.full_name == 'shopsys/shopsys' &&
            (needs.build-php-fpm-image.result == 'success' || needs.build-php-fpm-image.result == 'skipped') &&
            (needs.build-elasticsearch-image.result == 'success' || needs.build-elasticsearch-image.result == 'skipped')
        runs-on: ubuntu-22.04
        steps:
            -   name: GIT checkout branch - ${{ github.ref }}
                uses: actions/checkout@v3
                with:
                    ref: ${{ github.ref }}
            -   name: Download docker-compose.yml from artifacts
                uses: actions/download-artifact@v3
                with:
                    name: docker-compose
            -   name: Build application
                run: |
                    docker-compose pull --parallel postgres webserver elasticsearch redis php-fpm storefront
                    docker-compose up -d postgres webserver elasticsearch redis php-fpm storefront
                    docker-compose exec -T php-fpm php phing -D production.confirm.action=y -D change.environment=dev environment-change test-dirs-create db-create test-db-create db-demo elasticsearch-index-recreate elasticsearch-export error-pages-generate
            -   name: Run tests
                run: docker-compose exec -T php-fpm php phing -D production.confirm.action=y tests
            -   name: PHP-FPM container logs
                if: ${{ failure() }}
                run: docker-compose logs php-fpm
            -   name: Storefront container logs
                if: ${{ failure() }}
                run: docker compose logs storefront
            -   name: Nginx container logs
                if: ${{ failure() }}
                run: docker compose logs webserver
    tests-acceptance:
        name: Run acceptance tests
        needs: [build-php-fpm-image, build-elasticsearch-image]
        if: |
            always() && !failure() && !cancelled() &&
            github.event.pull_request.head.repo.full_name == 'shopsys/shopsys' &&
            (needs.build-php-fpm-image.result == 'success' || needs.build-php-fpm-image.result == 'skipped') &&
            (needs.build-elasticsearch-image.result == 'success' || needs.build-elasticsearch-image.result == 'skipped')
        runs-on: ubuntu-22.04
        steps:
            -   name: GIT checkout branch - ${{ github.ref }}
                uses: actions/checkout@v3
                with:
                    ref: ${{ github.ref }}
            -   name: Download docker-compose.yml from artifacts
                uses: actions/download-artifact@v3
                with:
                    name: docker-compose
            -   name: Build application
                run: |
                    docker-compose pull --parallel webserver postgres elasticsearch redis php-fpm storefront selenium-server
                    docker-compose up -d
                    docker-compose exec -T php-fpm php phing -D production.confirm.action=y -D change.environment=dev environment-change dirs-create test-dirs-create db-create test-db-create db-demo error-pages-generate test-db-demo test-elasticsearch-index-recreate test-elasticsearch-export tests-acceptance-build
            -   name: Run acceptance tests
                run: docker-compose exec -T php-fpm php phing -D production.confirm.action=y tests-acceptance
            -   name: PHP-FPM container logs
                if: ${{ failure() }}
                run: docker-compose logs php-fpm
            -   name: Copy Codeception logs from container
                if: ${{ failure() }}
                run: docker cp shopsys-framework-php-fpm:/var/www/html/project-base/app/var/log ./project-base/app/var/log
            -   name: Upload Codeception logs to artifacts
                if: ${{ failure() }}
                uses: actions/upload-artifact@v3
                with:
                    name: acceptance-logs
                    path: ./project-base/app/var/log/
    tests-storefront-acceptance:
        name: Run Cypress tests
        needs: [build-php-fpm-image, build-storefront-image, build-elasticsearch-image]
        if: |
            always() && !failure() && !cancelled() &&
            github.event.pull_request.head.repo.full_name == 'shopsys/shopsys' &&
            (needs.build-php-fpm-image.result == 'success' || needs.build-php-fpm-image.result == 'skipped') &&
            (needs.build-storefront-image.result == 'success' || needs.build-storefront-image.result == 'skipped') &&
            (needs.build-elasticsearch-image.result == 'success' || needs.build-elasticsearch-image.result == 'skipped')
        runs-on: ubuntu-22.04
        steps:
            -   name: GIT checkout branch - ${{ github.ref }}
                uses: actions/checkout@v3
                with:
                    ref: ${{ github.ref }}
            -   name: Download docker-compose.cypress.yml from artifacts
                uses: actions/download-artifact@v3
                with:
                    name: docker-compose-cypress
            -   name: Build application
                run: |
                    mv docker-compose.cypress.yml docker-compose.yml
                    docker compose up -d
                    docker compose exec php-fpm php phing -D production.confirm.action=y db-create frontend-api-enable frontend-api-generate-new-keys build-demo-dev-quick error-pages-generate test-db-create test-db-demo test-elasticsearch-index-recreate test-elasticsearch-export
                    docker compose exec php-fpm php phing -D production.confirm.action=y -D change.environment=acc environment-change
            -   name: Run Cypress tests
                run: docker compose run cypress
            -   name: Upload Cypress videos to artifacts
                if: ${{ failure() }}
                uses: actions/upload-artifact@v3
                with:
                    name: cypress-videos
                    path: ./videos
            -   name: Upload Cypress screenshots to artifacts
                if: ${{ failure() }}
                uses: actions/upload-artifact@v3
                with:
                    name: cypress-screenshots
                    path: ./screenshots
            -   name: PHP-FPM container logs
                if: ${{ failure() }}
                run: docker compose logs php-fpm
            -   name: Nginx container logs
                if: ${{ failure() }}
                run: docker compose logs webserver
            -   name: Storefront container logs
                if: ${{ failure() }}
                run: docker compose logs storefront
            -   name: Cypress container logs
                if: ${{ failure() }}
                run: docker compose logs cypress
    build-fork-docker-images:
        if: github.event.pull_request.head.repo.full_name == 'shopsys/shopsys'
        name: Build application and run standards checks and tests
        runs-on: ubuntu-22.04
        needs: variables
        steps:
            -   name: GIT checkout branch - ${{ github.ref }}
                uses: actions/checkout@v3
                with:
                    ref: ${{ github.ref }}
            -   name: Build PHP-FPM image
                if: needs.variables.outputs.DOCKER_PHP_FPM_IMAGE_EXISTS == 0
                run: .github/build-php-fpm-image.sh ${{ needs.variables.outputs.DOCKER_PHP_FPM_REPOSITORY_TAG }}
            -   name: Build Elasticsearch image
                if: needs.variables.outputs.DOCKER_ELASTICSEARCH_IMAGE_EXISTS == 0
                run: .github/build-elasticsearch-image.sh ${{ needs.variables.outputs.DOCKER_ELASTICSEARCH_REPOSITORY_TAG }}
            -   name: Build Storefront image
                if: needs.variables.outputs.DOCKER_STOREFRONT_IMAGE_EXISTS == 0
                run: .github/build-storefront-image.sh ${{ needs.variables.outputs.DOCKER_STOREFRONT_REPOSITORY_TAG }}
            -   name: Build Storefront CI image
                if: needs.variables.outputs.DOCKER_STOREFRONT_CI_IMAGE_EXISTS == 0
                run: .github/build-storefront-ci-image.sh ${{ needs.variables.outputs.DOCKER_STOREFRONT_CI_REPOSITORY_TAG }}
            -   name: Copy and rename docker-compose.github-actions.yml.dist to docker-compose.yml
                run: cp -f ./docker/conf/docker-compose.github-actions.yml.dist ./docker-compose.yml
            -   name: Update docker-compose.yml file with right PHP-FPM image
                run: "sed -i \"s#php-fpm-image#${{ needs.variables.outputs.DOCKER_PHP_FPM_REPOSITORY_TAG }}#\" ./docker-compose.yml"
            -   name: Update docker-compose.yml file with right Elasticsearch image
                run: "sed -i \"s#elasticsearch-image#${{ needs.variables.outputs.DOCKER_ELASTICSEARCH_REPOSITORY_TAG }}#\" ./docker-compose.yml"
            -   name: Update docker-compose.yml file with right Storefront image
                run: "sed -i \"s#storefront-image#${{ needs.variables.outputs.DOCKER_STOREFRONT_CI_REPOSITORY_TAG }}#\" ./docker-compose.yml"
            -   name: Build PHP-FPM part of application
                run: |
                    cat docker-compose.yml
                    docker-compose pull --parallel webserver postgres redis selenium-server php-fpm elasticsearch storefront
                    docker-compose up -d --force-recreate
                    docker cp ./ shopsys-framework-php-fpm:/var/www/html
                    docker-compose exec -T --user root php-fpm chown -R www-data:www-data /var/www/html
                    docker-compose exec -T php-fpm rm -rf /var/www/html/composer.lock /var/www/html/project-base/package-lock.json /var/www/html/project-base/migrations-lock.yml
                    docker-compose exec -T php-fpm composer install --optimize-autoloader --no-interaction
                    docker-compose exec -T php-fpm php phing -D production.confirm.action=y -D change.environment=dev environment-change dirs-create test-dirs-create assets npm build-version-generate frontend-api-enable db-create test-db-create db-demo elasticsearch-index-recreate elasticsearch-export error-pages-generate test-db-demo test-elasticsearch-index-recreate test-elasticsearch-export tests-acceptance-build
            -   name: Check standards
                run: docker-compose exec -T php-fpm php phing standards
            -   name: Run tests
                run: docker-compose exec -T php-fpm php phing tests
            -   name: Run acceptance tests
                run: docker-compose exec -T php-fpm php phing tests-acceptance
            -   name: PHP-FPM container logs
                if: ${{ failure() }}
                run: docker-compose logs php-fpm
            -   name: Storefront container logs
                if: ${{ failure() }}
                run: docker-compose logs storefront
            -   name: Copy Codeception logs from container
                if: ${{ failure() }}
                run: docker cp shopsys-framework-php-fpm:/var/www/html/project-base/app/var/log ./project-base/app/var/log
            -   name: Upload Codeception logs to artifacts
                if: ${{ failure() }}
                uses: actions/upload-artifact@v3
                with:
                    name: acceptance-logs
                    path: ./project-base/app/var/log/
            -   name: Build Storefront part of application
                run: |
                    docker compose cp ./project-base/app/schema.graphql storefront:/home/node/app/schema.graphql
                    docker compose exec storefront pnpm install --frozen-lockfile --force
            -   name: Check no NEXT_PUBLIC_ variables are used in Storefront
                run: |
                    docker compose exec --user root storefront apk add grep
                    docker compose exec storefront sh check-next-public-variable.sh
            -   name: Check graphql schema files are up to date
                run: |
                    docker compose exec php-fpm php phing frontend-api-generate-graphql-schema
                    docker compose cp php-fpm:/var/www/html/project-base/app/schema.graphql /tmp/schema.graphql
                    docker compose cp /tmp/schema.graphql storefront:/home/node/app/schema.graphql
                    docker compose exec -u root storefront chown -R node:node /home/node/app
                    docker compose exec storefront sh check-code-gen.sh
            -   name: Check Storefront standards
                run: docker compose exec storefront pnpm run check
            -   name: Storefront container logs
                if: ${{ failure() }}
                run: docker compose logs storefront
            -   name: PHP-FPM container logs
                if: ${{ failure() }}
                run: docker compose logs php-fpm
            -   name: Download docker-compose.cypress.yml from artifacts
                uses: actions/download-artifact@v3
                with:
                    name: docker-compose-cypress
            -   name: Stop previous running application
                run: docker compose down
            -   name: Build application
                run: |
                    mv docker-compose.cypress.yml docker-compose.yml
                    docker compose up -d
                    docker compose exec php-fpm php phing -D production.confirm.action=y db-create frontend-api-enable frontend-api-generate-new-keys build-demo-dev-quick error-pages-generate test-db-create test-db-demo test-elasticsearch-index-recreate test-elasticsearch-export
                    docker compose exec php-fpm php phing -D production.confirm.action=y -D change.environment=acc environment-change
            -   name: Run Cypress tests
                run: docker compose run cypress
            -   name: Upload Cypress videos to artifacts
                if: ${{ failure() }}
                uses: actions/upload-artifact@v3
                with:
                    name: cypress-videos
                    path: ./videos
            -   name: Upload Cypress screenshots to artifacts
                if: ${{ failure() }}
                uses: actions/upload-artifact@v3
                with:
                    name: cypress-screenshots
                    path: ./screenshots
            -   name: PHP-FPM container logs
                if: ${{ failure() }}
                run: docker compose logs php-fpm
            -   name: Nginx container logs
                if: ${{ failure() }}
                run: docker compose logs webserver
            -   name: Storefront container logs
                if: ${{ failure() }}
                run: docker compose logs storefront
            -   name: Cypress container logs
                if: ${{ failure() }}
                run: docker compose logs cypress
    review:
        name: Review
        needs: [variables, build-php-fpm-image, build-storefront-image, build-elasticsearch-image]
        if: |
            always() && !failure() && !cancelled() &&
            github.event.pull_request.head.repo.full_name == 'shopsys/shopsys' &&
            (needs.build-php-fpm-image.result == 'success' || needs.build-php-fpm-image.result == 'skipped') &&
            (needs.build-storefront-image.result == 'success' || needs.build-storefront-image.result == 'skipped') &&
            (needs.build-elasticsearch-image.result == 'success' || needs.build-elasticsearch-image.result == 'skipped')
        runs-on: [self-hosted, linux, review-stage]
        env:
            BRANCH_NAME: ${{ needs.variables.outputs.BRANCH_NAME }}
            BRANCH_NAME_ESCAPED: ${{ needs.variables.outputs.BRANCH_NAME_ESCAPED }}
        steps:
            -   name: Create branch directory
                run: |
                    rm -rf ${BRANCH_NAME}
                    mkdir ${BRANCH_NAME}
            -   name: Set ENV variables required for review
                run: |
                    HOST=${BRANCH_NAME_ESCAPED}.${{ vars.REVIEW_STAGE_URL }}
                    echo "HOSTS=${HOST}, cz.${HOST}" >> $GITHUB_ENV
            -   name: Download docker-compose.review.yml from artifacts
                uses: actions/download-artifact@v3
                with:
                    name: docker-compose-review
            -   name: Download set-urls-for-review-sh from artifacts
                uses: actions/download-artifact@v3
                with:
                    name: set-urls-for-review
            -   name: Move artifacts to branch folder
                run: |
                    mv docker-compose.review.yml ${BRANCH_NAME}/docker-compose.yml
                    mv set-urls-for-review.sh ${BRANCH_NAME}/set-urls-for-review.sh
            -   name: Start project
                run: |
                    cd ${BRANCH_NAME}
                    chmod +x set-urls-for-review.sh
                    ./set-urls-for-review.sh setDomainsToDockerCompose
                    docker compose down -v --remove-orphans || true
                    docker compose pull --parallel webserver postgres redis php-fpm elasticsearch smtp-server
                    docker compose up -d --force-recreate
                    ./set-urls-for-review.sh setUrlsToDomainsUrls
                    docker compose exec -T php-fpm php phing -D production.confirm.action=y db-create demo-data error-pages-generate warmup
                    ./set-urls-for-review.sh printDomains
    build-successful:
        if: ${{ always() }}
        name: Build successful
        needs: [tests-acceptance, standards, tests-unit-functional-smoke, standards-storefront, review, build-fork-docker-images]
        runs-on: ubuntu-22.04
        env:
            BUILD_FORK_RESULT: ${{ needs.build-fork-docker-images.result }}
            STANDARDS_RESULT: ${{ needs.standards.result }}
            TESTS_RESULT: ${{ needs.tests-unit-functional-smoke.result }}
            TESTS_ACCEPTANCE_RESULT: ${{ needs.tests-acceptance.result }}
            STANDARDS_STOREFRONT_RESULT: ${{ needs.standards-storefront.result }}
        steps:
            -   name: GIT checkout branch - ${{ github.ref }}
                uses: actions/checkout@v3
                with:
                    ref: ${{ github.ref }}
            -   name: Build successful
                run: |
                    EXIT_CODE=`. .github/get-build-exit-code.sh && getBuildExitCodeBasedOnJobResults ${BUILD_FORK_RESULT} ${STANDARDS_RESULT} ${TESTS_RESULT} ${TESTS_ACCEPTANCE_RESULT} ${STANDARDS_STOREFRONT_RESULT} > /dev/null ; echo $?`
                    exit "${EXIT_CODE}"
